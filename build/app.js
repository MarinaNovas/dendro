"use strict";(self.webpackChunkproject_dendro=self.webpackChunkproject_dendro||[]).push([[143],{81390:(e,t,r)=>{r.r(t)},53037:(e,t,r)=>{r.r(t)},95508:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const l=r(85893),i=r(46679),d=r(80583),n=r(67294),o=r(86706),u=r(28527);t.default=({cluster:e})=>{const{currentEntity:t}=(0,o.useSelector)(u.selectEntityInfo),r=(0,i.useMantineTheme)(),s=(0,o.useDispatch)(),a=r.colors.blue[2],c=r.colors.blue[9],p=r.colors.dark[4],v=r.colors.dark[7],y=r.colors.gray[3],h=(0,n.useRef)(null),f=window.screen.width-600,m=(0,n.useMemo)((()=>{var t,r;return(null===(t=e.children)||void 0===t?void 0:t.reduce(((e,t)=>{var r;return e+86*((null===(r=t.children)||void 0===r?void 0:r.length)||0)}),null===(r=e.children)||void 0===r?void 0:r.length))||86}),[e]);return(0,n.useEffect)((()=>{(0,d.select)(h.current).selectAll("svg").remove();const l=(0,d.cluster)()((0,d.hierarchy)(e,(e=>e.children))),i=f/(l.height+1),n=(0,d.tree)().nodeSize([60,i])(l);let o=1/0,x=-1/0;n.each((e=>{e.x>x&&(x=e.x),e.x<o&&(o=e.x)}));const g=(0,d.select)(h.current).append("svg").attr("viewBox",[1*-i/2,o-60,f,m]).attr("width",f).attr("height",m).attr("style","max-width: 100%; height: auto; height: intrinsic;").attr("font-family","sans-serif").attr("font-size",16);g.selectAll("path").data(n.descendants().slice(1)).join("path").attr("d",(e=>{var t,r,l,i,d,n,o;return"M"+e.y+","+e.x+"C"+((null===(t=e.parent)||void 0===t?void 0:t.y)?(null===(r=e.parent)||void 0===r?void 0:r.y)+150:150)+","+e.x+" "+((null===(l=e.parent)||void 0===l?void 0:l.y)?(null===(i=e.parent)||void 0===i?void 0:i.y)+50:50)+","+(null===(d=e.parent)||void 0===d?void 0:d.x)+" "+(null===(n=e.parent)||void 0===n?void 0:n.y)+","+(null===(o=e.parent)||void 0===o?void 0:o.x)})).style("fill","none").attr("stroke",p);const j=g.selectAll("g").data(n.descendants()).join("g");j.attr("transform",(e=>`translate(${e.y+10},${e.x})`)).append("circle").on("click",((e,r)=>{r.data.id===(null==t?void 0:t.id)?(e.target.style.fill=a,s((0,u.setCurrentEntity)(null))):(e.target.style.fill=c,s((0,u.setCurrentEntity)(r.data)))})).attr("r",12).style("fill",(e=>e.data.id===(null==t?void 0:t.id)?a:c)).attr("stroke",v).style("stroke-width",3),j.append("text").text((e=>e.data.name)).style("font",`12px ${r.fontFamily}`).style("fill",y).attr("x",-24).attr("y",-24)}),[e,t]),(0,l.jsx)("div",{ref:h})}},62721:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const l=r(70655),i=r(85893),d=r(46679),n=r(86706),o=r(28527),u=l.__importDefault(r(95508));t.default=()=>{const e=(0,n.useSelector)(o.selectClusters);return(0,i.jsx)(d.Container,{fluid:!0,children:e.map((e=>(0,i.jsx)(u.default,{cluster:e},e.id)))})}},69318:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const l=r(85893),i=r(46679),d=r(67294),n=r(86706),o=r(67900),u=r(78593),s=r(28527);t.default=()=>{const[e,t]=(0,d.useState)(null),[r,a]=(0,d.useState)(null),c=(0,n.useSelector)(s.selectClusters),{currentEntity:p}=(0,n.useSelector)(s.selectEntityInfo),v=(0,n.useDispatch)(),y=(null==p?void 0:p.type)===o.EEntityType.Product,h=(null==p?void 0:p.type)===o.EEntityType.Group||y,f=(null==p?void 0:p.type)===o.EEntityType.Cluster||h,m=(0,d.useMemo)((()=>(0,u.findCurrentCluster)(c,p)),[c,p]),x=(0,d.useMemo)((()=>(0,u.findCurrentGroup)(null==m?void 0:m.children,p)),[m,p]),g=(0,d.useMemo)((()=>c.map((({id:e,name:t})=>({label:t,value:e})))),[c]),j=(0,d.useMemo)((()=>{var e;return(null===(e=null==m?void 0:m.children)||void 0===e?void 0:e.map((({id:e,name:t})=>({label:t,value:e}))))||[]}),[m]);(0,d.useEffect)((()=>{a(m),t(x)}),[m,x]);return(0,l.jsxs)(i.Grid,{grow:!0,children:[y&&(0,l.jsx)(i.Grid.Col,{children:(0,l.jsx)(i.TextInput,{label:"Продукт:",value:null==p?void 0:p.name,disabled:!0})}),h&&(0,l.jsx)(i.Grid.Col,{children:y?(0,l.jsx)(i.Select,{label:"Группа:",value:null==e?void 0:e.id,onChange:e=>{var r,l,i;const d=(null===(r=null==m?void 0:m.children)||void 0===r?void 0:r.find((({id:t})=>t==e)))||null;if((null==d?void 0:d.id)===(null==x?void 0:x.id))return;const n=null===(l=null==x?void 0:x.children)||void 0===l?void 0:l.filter((({id:e})=>e!==(null==p?void 0:p.id))),o=p?null===(i=null==d?void 0:d.children)||void 0===i?void 0:i.concat(p):null==d?void 0:d.children,a=c.map((e=>{var t;return e.id===(null==m?void 0:m.id)?{...e,children:null===(t=e.children)||void 0===t?void 0:t.map((e=>e.id===(null==x?void 0:x.id)?{...e,children:n}:e.id===(null==d?void 0:d.id)?{...e,children:o}:e))}:e}));t(d),v((0,s.addHistoryItem)({stack:c,timestamp:(0,u.getTimeStamp)()})),v((0,s.updateClusters)(a))},data:j}):(0,l.jsx)(i.TextInput,{label:"Группа:",value:null==x?void 0:x.name,disabled:!0})}),f&&(0,l.jsx)(i.Grid.Col,{children:h?(0,l.jsx)(i.Select,{label:"Кластер:",value:null==r?void 0:r.id,onChange:e=>{var r,l,i,d,n,y;const h=c.find((({id:t})=>t===e))||null;if((null==h?void 0:h.id)!==(null==m?void 0:m.id))if((null==p?void 0:p.type)===o.EEntityType.Group){const e=null===(r=null==m?void 0:m.children)||void 0===r?void 0:r.filter((({id:e})=>e!==(null==p?void 0:p.id))),d=p?null===(l=null==h?void 0:h.children)||void 0===l?void 0:l.concat(p):null==h?void 0:h.children,n=c.map((t=>t.id===(null==m?void 0:m.id)?{...t,children:e}:t.id===(null==h?void 0:h.id)?{...t,children:d}:t));t((null===(i=null==h?void 0:h.children)||void 0===i?void 0:i[0])||null),a(h),v((0,s.addHistoryItem)({stack:c,timestamp:(0,u.getTimeStamp)()})),v((0,s.updateClusters)(n))}else if((null==p?void 0:p.type)===o.EEntityType.Product){const e=null===(d=null==m?void 0:m.children)||void 0===d?void 0:d.map((e=>{var t;return e.id===(null==x?void 0:x.id)?{...e,children:null===(t=e.children)||void 0===t?void 0:t.filter((e=>e.id!==p.id))}:e})),r=p?null===(n=null==h?void 0:h.children)||void 0===n?void 0:n.map(((e,t)=>{var r;return 0===t?{...e,children:null===(r=e.children)||void 0===r?void 0:r.concat(p)}:e})):null==h?void 0:h.children,l=c.map((t=>t.id===(null==m?void 0:m.id)?{...t,children:e}:t.id===(null==h?void 0:h.id)?{...t,children:r}:t));t((null===(y=null==h?void 0:h.children)||void 0===y?void 0:y[0])||null),a(h),v((0,s.addHistoryItem)({stack:c,timestamp:(0,u.getTimeStamp)()})),v((0,s.updateClusters)(l))}},data:g}):(0,l.jsx)(i.TextInput,{label:"Кластер:",value:null==m?void 0:m.name,disabled:!0})}),(null==p?void 0:p.id)&&(0,l.jsx)(i.Grid.Col,{children:(0,l.jsx)(i.Stack,{align:"center",children:(0,l.jsx)(i.Button,{color:"red",onClick:()=>{v((0,s.addHistoryItem)({stack:c,timestamp:(0,u.getTimeStamp)()}));const t={cluster:{id:(null==m?void 0:m.id)||null,newId:h?null==r?void 0:r.id:null},group:y?{id:null==x?void 0:x.id,newId:null==e?void 0:e.id}:x,product:y?p:null};y?v((0,s.deleteProduct)(t)):h?v((0,s.deleteGroup)(t)):f&&v((0,s.updateClusters)(c.filter((e=>e.id!==(null==m?void 0:m.id))))),v((0,s.setCurrentEntity)(null))},children:"Удалить"})})})]})}},1745:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const l=r(85893),i=r(67294),d=r(86706),n=r(28527),o=r(46679);t.default=()=>{const e=(0,d.useSelector)(n.selectClusters),t=(0,i.useMemo)((()=>{const t=new Blob([JSON.stringify(e)],{type:"text/plain"});return URL.createObjectURL(t)}),[e]);return(0,l.jsx)(o.Center,{children:(0,l.jsx)(o.Button,{component:"a",variant:"light",color:"blue",download:"export.json",href:t,children:"Экспортировать json"})})}},41381:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const l=r(70655),i=r(85893),d=r(46679),n=r(67294),o=r(86706),u=r(78593),s=r(28527),a=l.__importDefault(r(81649));t.default=()=>{const e=(0,a.default)(),[t,r]=(0,n.useState)(!1),l=(0,o.useSelector)(s.selectClusters),c=(0,o.useSelector)(s.selectHistoryStack),p=(0,o.useSelector)(s.selectHistoryCurrentIndex),v=(0,o.useDispatch)(),y=c.length>0,h=e=>{const t=parseInt(e.currentTarget.id,10);-1===p&&v((0,s.addHistoryItem)({stack:l,timestamp:(0,u.getTimeStamp)()})),v((0,s.updateClusters)(c[t].stack)),v((0,s.setCurrentIndex)(t))};return(0,i.jsxs)(d.Stack,{children:[(0,i.jsx)(d.Button,{sx:t=>({fontWeight:400,fontSize:e.fontSize,backgroundColor:e.groupColor,color:e.color}),disabled:!y,variant:"light",color:"gray",onClick:()=>r((e=>!e)),children:(0,i.jsx)(d.Group,{position:"center",children:(0,i.jsx)(d.Text,{children:"История изменений"})})}),(0,i.jsx)(d.Collapse,{in:t,children:(0,i.jsxs)(d.Stack,{children:[(0,i.jsx)(d.ScrollArea,{type:"auto",style:{height:350,width:"100%"},children:c.map(((t,r)=>(0,i.jsx)(d.Box,{id:r.toString(),onClick:h,px:"sm",sx:t=>({backgroundColor:r===p?t.colors.dark[4]:t.colors.dark[8],textAlign:"center",padding:t.spacing.xs,borderRadius:t.radius.xs,cursor:"pointer",margin:t.spacing.xs,"&:hover":{backgroundColor:e.colorHover}}),children:(0,i.jsxs)(d.Group,{position:"apart",grow:!0,children:[(0,i.jsx)(d.Text,{children:`Версия - ${r}`}),(0,i.jsx)(d.Text,{children:t.timestamp})]})},r)))}),-1!==p&&(0,i.jsx)(d.Center,{children:(0,i.jsx)(d.Button,{color:"gray",variant:"subtle",onClick:()=>{const e=c.length-1;v((0,s.updateClusters)(c[e].stack)),v((0,s.setCurrentIndex)(e))},sx:t=>({fontWeight:400,fontSize:e.fontSize}),children:"Вернуть актуальную версию"})})]})})]})}},35116:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const l=r(70655),i=r(85893),d=r(46679),n=l.__importDefault(r(1581)),o=r(67294),u=r(86706),s=r(28527),a=r(78593),c={type:"array",items:{type:"object",properties:{id:{type:"string"},type:{type:"string"},name:{type:"string"},children:{$ref:"#"}},required:["id","name","type"]},additionalProperties:!1};t.default=({onImportFile:e})=>{const t=(0,o.useRef)(null),r=(0,u.useSelector)(s.selectClusters),l=(0,u.useDispatch)();return(0,i.jsxs)(d.Button,{variant:"light",color:"blue",onClick:()=>{var e;null===(e=t.current)||void 0===e||e.click()},children:["Импортировать json",(0,i.jsx)("input",{type:"file",id:"file",accept:".json",ref:t,style:{display:"none"},onInput:async i=>{var d,o;i.stopPropagation(),i.preventDefault(),e(!1);const u=(null===(d=i.currentTarget.files)||void 0===d?void 0:d[0])||null,p=await(null==u?void 0:u.text()),v=p?JSON.parse(p):null;(null===(o=t.current)||void 0===o?void 0:o.value)&&(t.current.value="");(new n.default).compile(c)(v)?(l((0,s.addHistoryItem)({stack:r,timestamp:(0,a.getTimeStamp)()})),l((0,s.updateClusters)(v))):e(!0)}})]})}},69872:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const l=r(85893),i=r(46679),d=r(67294),n=r(86706),o=r(28527);t.default=()=>{const e=(0,n.useSelector)(o.selectClusters),t=(0,d.useMemo)((()=>JSON.stringify(e,null,1)),[e]);return(0,l.jsx)(i.JsonInput,{placeholder:"[]",validationError:"Некорректный json",formatOnBlur:!0,autosize:!0,minRows:42,value:t,disabled:!0})}},30796:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const l=r(70655),i=r(85893),d=r(46679),n=r(76613),o=l.__importDefault(r(81649)),u=l.__importDefault(r(96694));t.default=({entity:e})=>{const t=(0,o.default)();return(0,i.jsx)(n.Droppable,{droppableId:e.id,type:e.type,children:r=>{var l;return(0,i.jsxs)("div",{...r.droppableProps,ref:r.innerRef,children:[(0,i.jsx)(d.Grid,{grow:!0,children:(0,i.jsxs)(d.Grid.Col,{sx:{marginBottom:10},children:[(0,i.jsx)(d.Paper,{shadow:"sm",mb:"md",sx:()=>({backgroundColor:t.clusterColor,color:t.colorSecondary,padding:"10px 8px",width:230,"& .mantine-Text-root":{lineHeight:1.2,padding:"0 8px",fontSize:t.fontSize,fontWeight:t.fotnWeight}}),children:(0,i.jsx)(d.Text,{align:"left",children:e.name})}),null===(l=e.children)||void 0===l?void 0:l.map(((e,t)=>(0,i.jsx)(u.default,{entity:e,index:t},e.id)))]})}),r.placeholder]})}})}},96694:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const l=r(70655),i=r(85893),d=r(46679),n=r(67294),o=r(76613),u=r(26089),s=l.__importDefault(r(81649)),a=r(67900),c=({entity:e,index:t})=>{const[r,l]=(0,n.useState)(!0),p=(0,s.default)();return(0,i.jsx)(o.Draggable,{draggableId:e.id,index:t,children:t=>(0,i.jsx)("div",{...t.draggableProps,...t.dragHandleProps,ref:t.innerRef,children:(0,i.jsx)(o.Droppable,{droppableId:e.id,type:e.type,children:t=>{var n;return(0,i.jsxs)("div",{...t.droppableProps,ref:t.innerRef,children:[(0,i.jsx)(d.Grid,{grow:!0,sx:{marginLeft:22},children:(0,i.jsxs)(d.Grid.Col,{children:[(0,i.jsxs)(d.Paper,{shadow:"sm",sx:()=>({display:"flex",justifyContent:"flex-start",alignItems:"center",backgroundColor:e.type==a.EEntityType.Product?"transparent":p.groupColor,color:e.type==a.EEntityType.Product?"rgba(255, 255, 255,0.7)":p.color,marginBottom:e.type==a.EEntityType.Product?0:10,padding:5,width:e.type==a.EEntityType.Product?168:200,border:e.type==a.EEntityType.Product?p.border:"","& .mantine-Text-root":{lineHeight:1.2,padding:"0 8px",fontSize:p.fontSize,fontWeight:p.fotnWeight},"&:hover":{color:p.color,backgroundColor:p.colorHover}}),children:[e.type===a.EEntityType.Group&&(0,i.jsx)(d.ActionIcon,{variant:"transparent",onClick:()=>l((e=>!e)),children:r?(0,i.jsx)(u.Minus,{size:14}):(0,i.jsx)(u.Plus,{size:14})}),(0,i.jsx)(d.Text,{align:"left",children:e.name})]}),e.type===a.EEntityType.Group&&(0,i.jsx)(d.Collapse,{in:r,children:null===(n=e.children)||void 0===n?void 0:n.map(((e,t)=>(0,i.jsx)(c,{entity:e,index:t},e.id)))})]})}),t.placeholder]})}})})},e.id)};t.default=c},45458:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const l=r(70655),i=r(85893),d=r(76613),n=r(86706),o=r(28527),u=r(78593),s=l.__importDefault(r(30796));t.default=()=>{const e=(0,n.useSelector)(o.selectClusters),t=(0,n.useDispatch)();return(0,i.jsx)(d.DragDropContext,{onDragEnd:r=>{!r.destination||r.source.droppableId===r.destination.droppableId&&r.source.index===r.destination.index||(t((0,o.addHistoryItem)({stack:e,timestamp:(0,u.getTimeStamp)()})),t((0,o.updateClusters)((0,u.getReoderedList)(e,r))))},children:e.map((e=>(0,i.jsx)(s.default,{entity:e},e.id)))})}},67900:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EEntityType=void 0,function(e){e.Cluster="cluster",e.Group="group",e.Product="product"}(t.EEntityType||(t.EEntityType={}))},81649:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const l=r(46679),i=r(67294);t.default=()=>{const e=(0,l.useMantineTheme)();return(0,i.useMemo)((()=>({clusterColor:e.fn.rgba(e.colors.gray[7],.45),groupColor:e.fn.rgba(e.colors.gray[7],.22),colorHover:e.fn.rgba(e.colors.blue[9],.21),color:e.colors.gray[0],colorSecondary:e.fn.rgba(e.colors.gray[0],.49),fontSize:14,fotnWeight:300,border:`1px solid ${e.colors.gray[7]}`})),[e])}},64826:(e,t,r)=>{const l=r(70655),i=r(85893),d=r(46679),n=r(67294),o=r(20745),u=r(86706),s=r(26089),a=r(28527),c=l.__importDefault(r(62721)),p=l.__importDefault(r(69318)),v=l.__importDefault(r(41381)),y=l.__importDefault(r(69872)),h=l.__importDefault(r(35116)),f=l.__importDefault(r(1745)),m=l.__importDefault(r(45458));r(53037),r(81390);(0,o.createRoot)(document.getElementById("app")).render((0,i.jsx)((()=>{const[e,t]=(0,n.useState)(!1),[r,l]=(0,n.useState)(!1);return(0,i.jsx)(u.Provider,{store:a.store,children:(0,i.jsx)(d.MantineProvider,{theme:{fontFamily:"Roboto",colorScheme:"dark"},children:(0,i.jsxs)(d.AppShell,{fixed:!0,padding:"md",navbar:(0,i.jsx)(d.Navbar,{width:{base:300},p:"xs",children:(0,i.jsx)(d.Navbar.Section,{grow:!0,mt:"md",children:(0,i.jsx)(d.ScrollArea,{style:{height:window.screen.height-240,width:"100%"},offsetScrollbars:!0,children:(0,i.jsx)(m.default,{})})})}),header:(0,i.jsx)(d.Header,{height:60,p:"xs",children:(0,i.jsxs)(d.Group,{position:"apart",children:[(0,i.jsx)(d.Title,{order:3,children:"Project Dendro"}),(0,i.jsxs)(d.Group,{children:[(0,i.jsx)(h.default,{onImportFile:e=>l(e)}),(0,i.jsx)(d.Button,{variant:"light",color:"gray",onClick:()=>t(!0),children:"Посмотреть json"})]}),(0,i.jsxs)(d.Drawer,{opened:e,onClose:()=>t(!1),title:"Схема json",padding:"xl",size:"md",children:[(0,i.jsx)(d.ScrollArea,{type:"auto",style:{height:window.screen.height-280},children:(0,i.jsx)(y.default,{})}),(0,i.jsx)(d.Space,{h:"md"}),(0,i.jsx)(f.default,{})]})]})}),aside:(0,i.jsxs)(d.Aside,{fixed:!0,p:"md",hiddenBreakpoint:"sm",width:{sm:200,lg:300},children:[(0,i.jsxs)(d.Aside.Section,{grow:!0,children:[(0,i.jsx)(p.default,{}),(0,i.jsx)(d.Space,{h:"md"})]}),(0,i.jsx)(d.Aside.Section,{children:(0,i.jsx)(v.default,{})})]}),children:[r&&(0,i.jsx)(d.Notification,{icon:(0,i.jsx)(s.X,{size:18}),color:"red",onClose:()=>l(!1),children:"Некорректная схема!"}),(0,i.jsx)(d.Grid,{grow:!0,gutter:"sm",justify:"center",children:(0,i.jsx)(d.Grid.Col,{children:(0,i.jsx)(c.default,{})})})]})})})}),{}))},87838:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const l=r(70655),i=r(61280),d=l.__importDefault(r(99934)),n=(0,i.createSlice)({name:"clusters",initialState:d.default,reducers:{deleteProduct:(e,t)=>e.map((e=>{var r;return e.id===t.payload.cluster.id?{...e,children:null===(r=e.children)||void 0===r?void 0:r.map((e=>{var r,l;return e.id===(null===(r=t.payload.group)||void 0===r?void 0:r.id)?{...e,children:null===(l=e.children)||void 0===l?void 0:l.filter((e=>{var r;return e.id!==(null===(r=t.payload.product)||void 0===r?void 0:r.id)}))}:e}))}:e})),addProduct:(e,t)=>e.map((e=>{var r;return e.id===t.payload.cluster.newId?{...e,children:null===(r=e.children)||void 0===r?void 0:r.map((e=>{const r=t.payload.group;return e.id===(null==r?void 0:r.newId)?{...e,children:[...e.children||[],t.payload.product]}:e}))}:e})),deleteGroup:(e,t)=>e.map((e=>{var r;return e.id===t.payload.cluster.id?{...e,children:null===(r=e.children)||void 0===r?void 0:r.filter((e=>{var r;return e.id!==(null===(r=t.payload.group)||void 0===r?void 0:r.id)}))}:e})),addGroup:(e,t)=>e.map((e=>e.id===t.payload.cluster.newId?{...e,children:[...e.children||[],t.payload.group]}:e)),updateClusters:(e,t)=>t.payload}});t.default=n},33311:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const l=(0,r(61280).createSlice)({name:"entityInfoSlice",initialState:{currentEntity:null},reducers:{setCurrentEntity:(e,t)=>({...e,currentEntity:t.payload})}});t.default=l},54536:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const l=(0,r(61280).createSlice)({name:"history",initialState:{currentIndex:-1,timeStack:[]},reducers:{addHistoryItem(e,t){-1!==e.currentIndex?(e.timeStack.length=e.currentIndex+1,e.timeStack[e.currentIndex]=t.payload,e.currentIndex=-1):e.timeStack.push(t.payload)},setCurrentIndex(e,t){e.currentIndex=t.payload},removeHistoryItem(e){e.timeStack.pop()}}});t.default=l},28527:(e,t,r)=>{var l,i;Object.defineProperty(t,"__esModule",{value:!0}),t.setCurrentEntity=t.removeHistoryItem=t.setCurrentIndex=t.addHistoryItem=t.updateClusters=t.addGroup=t.deleteGroup=t.addProduct=t.deleteProduct=t.selectClusters=t.selectEntityInfo=t.selectHistoryStack=t.selectHistoryCurrentIndex=t.store=void 0;const d=r(70655),n=r(61280),o=d.__importDefault(r(33311)),u=d.__importDefault(r(87838)),s=d.__importDefault(r(54536));t.store=(0,n.configureStore)({reducer:{entityInfo:o.default.reducer,clusters:u.default.reducer,history:s.default.reducer}});t.selectHistoryCurrentIndex=e=>e.history.currentIndex;t.selectHistoryStack=e=>e.history.timeStack;t.selectEntityInfo=e=>e.entityInfo;t.selectClusters=e=>e.clusters,l=u.default.actions,t.deleteProduct=l.deleteProduct,t.addProduct=l.addProduct,t.deleteGroup=l.deleteGroup,t.addGroup=l.addGroup,t.updateClusters=l.updateClusters,i=s.default.actions,t.addHistoryItem=i.addHistoryItem,t.setCurrentIndex=i.setCurrentIndex,t.removeHistoryItem=i.removeHistoryItem,t.setCurrentEntity=o.default.actions.setCurrentEntity},78593:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getTimeStamp=t.findCurrentGroup=t.findCurrentCluster=t.getReoderedList=void 0;const l=r(67900);function i(e,t){let r=(null==e?void 0:e.find((e=>e.id===t)))||null;if(!r)for(let l of e)if(r=l.children?i(l.children,t):null,r)break;return r}const d=(e,t,r)=>e.map((e=>e.id===t?{...e,children:r}:(null==e?void 0:e.children)?{...e,children:d(e.children,t,r)}:e));t.getReoderedList=function(e=[],t){var r,l;const n=t.source.index,o=t.destination.index,u=t.source.droppableId,s=t.destination.droppableId,a=null===(r=i(e,u))||void 0===r?void 0:r.children,c=null===(l=i(e,s))||void 0===l?void 0:l.children;if(!a||!c)return e;if(u===s){const t=function(e,t,r){const l=[...e],[i]=l.splice(t,1);return l.splice(r,0,i),l}(a,n,o);return d(e,u,t)}{let t=[...a];const[r]=t.splice(n,1);let l=[...c];l.splice(o,0,r);let i=d(e,u,t);return d(i,s,l)}};t.findCurrentCluster=(e=[],t)=>((null==t?void 0:t.type)===l.EEntityType.Product?e.find((e=>{var r;return null===(r=e.children)||void 0===r?void 0:r.find((e=>{var r;return null===(r=e.children)||void 0===r?void 0:r.find((e=>e.id===t.id))}))})):(null==t?void 0:t.type)===l.EEntityType.Group?e.find((e=>{var r;return null===(r=e.children)||void 0===r?void 0:r.find((e=>e.id===t.id))})):e.find((e=>e.id===(null==t?void 0:t.id))))||null;t.findCurrentGroup=(e=[],t)=>((null==t?void 0:t.type)===l.EEntityType.Group?e.find((e=>e.id===(null==t?void 0:t.id))):(null==t?void 0:t.type)===l.EEntityType.Product?e.find((e=>{var r;return null===(r=e.children)||void 0===r?void 0:r.find((e=>e.id===t.id))})):null)||null;t.getTimeStamp=()=>Intl.DateTimeFormat(void 0,{hour:"2-digit",minute:"2-digit",second:"2-digit",hour12:!1}).format(new Date)},99934:e=>{e.exports=JSON.parse('[{"id":"c1","type":"cluster","name":"кластер1","children":[{"id":"g1","type":"group","name":"группа1","children":[{"id":"p1","type":"product","name":"продукт1"},{"id":"p2","type":"product","name":"продукт2"},{"id":"p3","type":"product","name":"продукт3"}]},{"id":"g2","type":"group","name":"группа2","children":[{"id":"p11","type":"product","name":"продукт11"},{"id":"p22","type":"product","name":"продукт22"},{"id":"p33","type":"product","name":"продукт33"}]}]},{"id":"c2","type":"cluster","name":"кластер2","children":[{"id":"g4","type":"group","name":"группа4","children":[{"id":"p111","type":"product","name":"продукт111"},{"id":"p222","type":"product","name":"продукт222"},{"id":"p333","type":"product","name":"продукт333"}]},{"id":"g5","type":"group","name":"группа5","children":[{"id":"p1111","type":"product","name":"продукт1111"},{"id":"p2222","type":"product","name":"продукт2222"},{"id":"p3333","type":"product","name":"продукт3333"}]}]}]')}},e=>{e.O(0,[216],(()=>{return t=64826,e(e.s=t);var t}));e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LElBQ1RDLE9BQU8sSUFBSUMsTyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb2plY3QtZGVuZHJvLy4vc3JjL2NvbXBvbmVudHMvRGVuZHJvZ3JhbS50c3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1kZW5kcm8vLi9zcmMvY29tcG9uZW50cy9EZW5kcm9ncmFtTGlzdC50c3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1kZW5kcm8vLi9zcmMvY29tcG9uZW50cy9FbnRpdHlJbmZvLnRzeCIsIndlYnBhY2s6Ly9wcm9qZWN0LWRlbmRyby8uL3NyYy9jb21wb25lbnRzL0V4cG9ydEpzb24udHN4Iiwid2VicGFjazovL3Byb2plY3QtZGVuZHJvLy4vc3JjL2NvbXBvbmVudHMvSGlzdG9yeS50c3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1kZW5kcm8vLi9zcmMvY29tcG9uZW50cy9JbXBvcnRKc29uLnRzeCIsIndlYnBhY2s6Ly9wcm9qZWN0LWRlbmRyby8uL3NyYy9jb21wb25lbnRzL0pzb25FZGl0b3IudHN4Iiwid2VicGFjazovL3Byb2plY3QtZGVuZHJvLy4vc3JjL2NvbXBvbmVudHMvVHJlZUJyYW5jaC50c3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1kZW5kcm8vLi9zcmMvY29tcG9uZW50cy9UcmVlTGVhZi50c3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1kZW5kcm8vLi9zcmMvY29tcG9uZW50cy9UcmVlUGFuZWwudHN4Iiwid2VicGFjazovL3Byb2plY3QtZGVuZHJvLy4vc3JjL2VudW1zLnRzIiwid2VicGFjazovL3Byb2plY3QtZGVuZHJvLy4vc3JjL2hvb2tzL3VzZU1haW5UaGVtZS50cyIsIndlYnBhY2s6Ly9wcm9qZWN0LWRlbmRyby8uL3NyYy9wYWdlcy9NYWluLnRzeCIsIndlYnBhY2s6Ly9wcm9qZWN0LWRlbmRyby8uL3NyYy9zdG9yZS9jbHVzdGVyc1NsaWNlLnRzIiwid2VicGFjazovL3Byb2plY3QtZGVuZHJvLy4vc3JjL3N0b3JlL2VudGl0eUluZm9TbGljZS50cyIsIndlYnBhY2s6Ly9wcm9qZWN0LWRlbmRyby8uL3NyYy9zdG9yZS9oaXN0b3J5U2xpY2UudHMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1kZW5kcm8vLi9zcmMvc3RvcmUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1kZW5kcm8vLi9zcmMvdXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHt1c2VNYW50aW5lVGhlbWV9IGZyb20gJ0BtYW50aW5lL2NvcmUnO1xuaW1wb3J0IHtjbHVzdGVyLCBoaWVyYXJjaHksIHNlbGVjdCwgdHJlZX0gZnJvbSAnZDMnO1xuaW1wb3J0IHt1c2VFZmZlY3QsIHVzZVJlZiwgRkMsIHVzZU1lbW99IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7dXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge3NlbGVjdEVudGl0eUluZm8sIHNldEN1cnJlbnRFbnRpdHl9IGZyb20gJy4uL3N0b3JlJztcbmltcG9ydCB7SUVudGl0eX0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICBjbHVzdGVyOiBJRW50aXR5O1xufVxuXG5jb25zdCBEZW5kcm9ncmFtOiBGQzxJUHJvcHM+ID0gKHtjbHVzdGVyOiBjbHVzdGVyRGF0YX0pID0+IHtcbiAgICBjb25zdCB7Y3VycmVudEVudGl0eX0gPSB1c2VTZWxlY3RvcihzZWxlY3RFbnRpdHlJbmZvKTtcbiAgICBjb25zdCB0aGVtZSA9IHVzZU1hbnRpbmVUaGVtZSgpO1xuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcblxuICAgIGNvbnN0IHByaW1hcnlDb2xvciA9IHRoZW1lLmNvbG9ycy5ibHVlWzJdO1xuICAgIGNvbnN0IHNlY29uZGFyeUNvbG9yID0gdGhlbWUuY29sb3JzLmJsdWVbOV07XG4gICAgY29uc3QgbGluZUNvbG9yID0gdGhlbWUuY29sb3JzLmRhcmtbNF07XG4gICAgY29uc3QgYm9yZGVyQ29sb3IgPSB0aGVtZS5jb2xvcnMuZGFya1s3XTtcbiAgICBjb25zdCB0ZXh0Q29sb3IgPSB0aGVtZS5jb2xvcnMuZ3JheVszXTtcblxuICAgIGNvbnN0IGQzQ29udGFpbmVyID0gdXNlUmVmKG51bGwpO1xuXG4gICAgY29uc3QgcGFkZGluZyA9IDE7XG4gICAgY29uc3QgZGVmYXVsdE9mZnNldCA9IDg2O1xuICAgIGNvbnN0IHdpZHRoID0gd2luZG93LnNjcmVlbi53aWR0aCAtIDYwMDtcbiAgICBjb25zdCBoZWlnaHQgPSB1c2VNZW1vPG51bWJlcj4oXG4gICAgICAgICgpID0+XG4gICAgICAgICAgICBjbHVzdGVyRGF0YS5jaGlsZHJlbj8ucmVkdWNlKFxuICAgICAgICAgICAgICAgIChhY2MsIGN1cnJlbnQpOiBudW1iZXIgPT4gKGFjYyArPSAoY3VycmVudC5jaGlsZHJlbj8ubGVuZ3RoIHx8IDApICogZGVmYXVsdE9mZnNldCksXG4gICAgICAgICAgICAgICAgY2x1c3RlckRhdGEuY2hpbGRyZW4/Lmxlbmd0aFxuICAgICAgICAgICAgKSB8fCBkZWZhdWx0T2Zmc2V0LFxuICAgICAgICBbY2x1c3RlckRhdGFdXG4gICAgKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNlbGVjdChkM0NvbnRhaW5lci5jdXJyZW50KS5zZWxlY3RBbGwoJ3N2ZycpLnJlbW92ZSgpO1xuXG4gICAgICAgIGNvbnN0IGQzQ2x1c3RlciA9IGNsdXN0ZXI8SUVudGl0eT4oKTtcbiAgICAgICAgY29uc3Qgcm9vdCA9IGhpZXJhcmNoeShjbHVzdGVyRGF0YSwgZCA9PiBkLmNoaWxkcmVuKTtcbiAgICAgICAgY29uc3QgcHJlUm9vdExheW91dCA9IGQzQ2x1c3Rlcihyb290KTtcblxuICAgICAgICBjb25zdCBkeCA9IDYwO1xuICAgICAgICBjb25zdCBkeSA9IHdpZHRoIC8gKHByZVJvb3RMYXlvdXQuaGVpZ2h0ICsgcGFkZGluZyk7XG4gICAgICAgIGNvbnN0IHRyZWVMYXlvdXQgPSB0cmVlPElFbnRpdHk+KCkubm9kZVNpemUoW2R4LCBkeV0pO1xuICAgICAgICBjb25zdCByb290TGF5b3V0ID0gdHJlZUxheW91dChwcmVSb290TGF5b3V0KTtcblxuICAgICAgICBsZXQgeDAgPSBJbmZpbml0eTtcbiAgICAgICAgbGV0IHgxID0gLUluZmluaXR5O1xuICAgICAgICByb290TGF5b3V0LmVhY2goZCA9PiB7XG4gICAgICAgICAgICBpZiAoZC54ID4geDEpIHgxID0gZC54O1xuICAgICAgICAgICAgaWYgKGQueCA8IHgwKSB4MCA9IGQueDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qgc3ZnID0gc2VsZWN0KGQzQ29udGFpbmVyLmN1cnJlbnQpXG4gICAgICAgICAgICAuYXBwZW5kKCdzdmcnKVxuICAgICAgICAgICAgLmF0dHIoJ3ZpZXdCb3gnLCBbKC1keSAqIHBhZGRpbmcpIC8gMiwgeDAgLSBkeCwgd2lkdGgsIGhlaWdodF0pXG4gICAgICAgICAgICAuYXR0cignd2lkdGgnLCB3aWR0aClcbiAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBoZWlnaHQpXG4gICAgICAgICAgICAuYXR0cignc3R5bGUnLCAnbWF4LXdpZHRoOiAxMDAlOyBoZWlnaHQ6IGF1dG87IGhlaWdodDogaW50cmluc2ljOycpXG4gICAgICAgICAgICAuYXR0cignZm9udC1mYW1pbHknLCAnc2Fucy1zZXJpZicpXG4gICAgICAgICAgICAuYXR0cignZm9udC1zaXplJywgMTYpO1xuXG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoJ3BhdGgnKVxuICAgICAgICAgICAgLmRhdGEocm9vdExheW91dC5kZXNjZW5kYW50cygpLnNsaWNlKDEpKVxuICAgICAgICAgICAgLmpvaW4oJ3BhdGgnKVxuICAgICAgICAgICAgLmF0dHIoXG4gICAgICAgICAgICAgICAgJ2QnLFxuICAgICAgICAgICAgICAgIGQgPT5cbiAgICAgICAgICAgICAgICAgICAgJ00nICtcbiAgICAgICAgICAgICAgICAgICAgZC55ICtcbiAgICAgICAgICAgICAgICAgICAgJywnICtcbiAgICAgICAgICAgICAgICAgICAgZC54ICtcbiAgICAgICAgICAgICAgICAgICAgJ0MnICtcbiAgICAgICAgICAgICAgICAgICAgKGQucGFyZW50Py55ID8gZC5wYXJlbnQ/LnkgKyAxNTAgOiAxNTApICtcbiAgICAgICAgICAgICAgICAgICAgJywnICtcbiAgICAgICAgICAgICAgICAgICAgZC54ICtcbiAgICAgICAgICAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgICAgICAgICAgKGQucGFyZW50Py55ID8gZC5wYXJlbnQ/LnkgKyA1MCA6IDUwKSArXG4gICAgICAgICAgICAgICAgICAgICcsJyArXG4gICAgICAgICAgICAgICAgICAgIGQucGFyZW50Py54ICtcbiAgICAgICAgICAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgICAgICAgICAgZC5wYXJlbnQ/LnkgK1xuICAgICAgICAgICAgICAgICAgICAnLCcgK1xuICAgICAgICAgICAgICAgICAgICBkLnBhcmVudD8ueFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnN0eWxlKCdmaWxsJywgJ25vbmUnKVxuICAgICAgICAgICAgLmF0dHIoJ3N0cm9rZScsIGxpbmVDb2xvcik7XG5cbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRFbGVtZW50cyA9IHN2Zy5zZWxlY3RBbGwoJ2cnKS5kYXRhKHJvb3RMYXlvdXQuZGVzY2VuZGFudHMoKSkuam9pbignZycpO1xuXG4gICAgICAgIHNlbGVjdGVkRWxlbWVudHNcbiAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBkID0+IGB0cmFuc2xhdGUoJHtkLnkgKyAxMH0sJHtkLnh9KWApXG4gICAgICAgICAgICAuYXBwZW5kKCdjaXJjbGUnKVxuICAgICAgICAgICAgLm9uKCdjbGljaycsIChldmVudCwgZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChkLmRhdGEuaWQgPT09IGN1cnJlbnRFbnRpdHk/LmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC5zdHlsZS5maWxsID0gcHJpbWFyeUNvbG9yO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChzZXRDdXJyZW50RW50aXR5KG51bGwpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQuc3R5bGUuZmlsbCA9IHNlY29uZGFyeUNvbG9yO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChzZXRDdXJyZW50RW50aXR5KGQuZGF0YSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYXR0cigncicsIDEyKVxuICAgICAgICAgICAgLnN0eWxlKCdmaWxsJywgZCA9PiAoZC5kYXRhLmlkID09PSBjdXJyZW50RW50aXR5Py5pZCA/IHByaW1hcnlDb2xvciA6IHNlY29uZGFyeUNvbG9yKSlcbiAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCBib3JkZXJDb2xvcilcbiAgICAgICAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgMyk7XG5cbiAgICAgICAgc2VsZWN0ZWRFbGVtZW50c1xuICAgICAgICAgICAgLmFwcGVuZCgndGV4dCcpXG4gICAgICAgICAgICAudGV4dChkID0+IGQuZGF0YS5uYW1lKVxuICAgICAgICAgICAgLnN0eWxlKCdmb250JywgYDEycHggJHt0aGVtZS5mb250RmFtaWx5fWApXG4gICAgICAgICAgICAuc3R5bGUoJ2ZpbGwnLCB0ZXh0Q29sb3IpXG4gICAgICAgICAgICAuYXR0cigneCcsIC0yNClcbiAgICAgICAgICAgIC5hdHRyKCd5JywgLTI0KTtcbiAgICB9LCBbY2x1c3RlckRhdGEsIGN1cnJlbnRFbnRpdHldKTtcblxuICAgIHJldHVybiA8ZGl2IHJlZj17ZDNDb250YWluZXJ9IC8+O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRGVuZHJvZ3JhbTtcbiIsImltcG9ydCB7Q29udGFpbmVyfSBmcm9tICdAbWFudGluZS9jb3JlJztcbmltcG9ydCB7RkN9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7dXNlU2VsZWN0b3J9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7c2VsZWN0Q2x1c3RlcnN9IGZyb20gJy4uL3N0b3JlJztcbmltcG9ydCBEZW5kcm9ncmFtIGZyb20gJy4vRGVuZHJvZ3JhbSc7XG5cbmNvbnN0IERlbmRyb2dyYW1MaXN0OiBGQyA9ICgpID0+IHtcbiAgICBjb25zdCBjbHVzdGVycyA9IHVzZVNlbGVjdG9yKHNlbGVjdENsdXN0ZXJzKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxDb250YWluZXIgZmx1aWQ+XG4gICAgICAgICAgICB7Y2x1c3RlcnMubWFwKGNsdXN0ZXIgPT4gKFxuICAgICAgICAgICAgICAgIDxEZW5kcm9ncmFtIGtleT17Y2x1c3Rlci5pZH0gY2x1c3Rlcj17Y2x1c3Rlcn0gLz5cbiAgICAgICAgICAgICkpfVxuICAgICAgICA8L0NvbnRhaW5lcj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRGVuZHJvZ3JhbUxpc3Q7XG4iLCJpbXBvcnQge0J1dHRvbiwgR3JpZCwgU2VsZWN0LCBTZWxlY3RJdGVtLCBTdGFjaywgVGV4dElucHV0fSBmcm9tICdAbWFudGluZS9jb3JlJztcbmltcG9ydCB7dXNlRWZmZWN0LCB1c2VTdGF0ZSwgRkMsIHVzZU1lbW99IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7dXNlU2VsZWN0b3IsIHVzZURpc3BhdGNofSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge0lFbnRpdHksIElDaGFuZ2VOb2RlLCBJTm9kZUluZn0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHtFRW50aXR5VHlwZX0gZnJvbSAnLi4vZW51bXMnO1xuaW1wb3J0IHtmaW5kQ3VycmVudENsdXN0ZXIsIGZpbmRDdXJyZW50R3JvdXAsIGdldFRpbWVTdGFtcH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBhZGRIaXN0b3J5SXRlbSxcbiAgICBkZWxldGVHcm91cCxcbiAgICBkZWxldGVQcm9kdWN0LFxuICAgIHNlbGVjdENsdXN0ZXJzLFxuICAgIHNlbGVjdEVudGl0eUluZm8sXG4gICAgc2V0Q3VycmVudEVudGl0eSxcbiAgICB1cGRhdGVDbHVzdGVycyxcbn0gZnJvbSAnLi4vc3RvcmUnO1xuXG5jb25zdCBFbnRpdHlJbmZvOiBGQyA9ICgpID0+IHtcbiAgICBjb25zdCBbc2VsZWN0ZWRHcm91cCwgc2V0U2VsZWN0ZWRHcm91cF0gPSB1c2VTdGF0ZTxJRW50aXR5IHwgbnVsbD4obnVsbCk7XG4gICAgY29uc3QgW3NlbGVjdGVkQ2x1c3Rlciwgc2V0U2VsZWN0ZWRDbHVzdGVyXSA9IHVzZVN0YXRlPElFbnRpdHkgfCBudWxsPihudWxsKTtcblxuICAgIGNvbnN0IGNsdXN0ZXJzID0gdXNlU2VsZWN0b3Ioc2VsZWN0Q2x1c3RlcnMpO1xuICAgIGNvbnN0IHtjdXJyZW50RW50aXR5fSA9IHVzZVNlbGVjdG9yKHNlbGVjdEVudGl0eUluZm8pO1xuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcblxuICAgIGNvbnN0IGlzUHJvZHVjdEF2YWlsYWJsZSA9IGN1cnJlbnRFbnRpdHk/LnR5cGUgPT09IEVFbnRpdHlUeXBlLlByb2R1Y3Q7XG4gICAgY29uc3QgaXNHcm91cEF2YWlsYWJsZSA9IGN1cnJlbnRFbnRpdHk/LnR5cGUgPT09IEVFbnRpdHlUeXBlLkdyb3VwIHx8IGlzUHJvZHVjdEF2YWlsYWJsZTtcbiAgICBjb25zdCBpc0NsdXN0ZXJBdmFpbGFibGUgPSBjdXJyZW50RW50aXR5Py50eXBlID09PSBFRW50aXR5VHlwZS5DbHVzdGVyIHx8IGlzR3JvdXBBdmFpbGFibGU7XG5cbiAgICBjb25zdCBjdXJyZW50Q2x1c3RlciA9IHVzZU1lbW8oKCkgPT4gZmluZEN1cnJlbnRDbHVzdGVyKGNsdXN0ZXJzLCBjdXJyZW50RW50aXR5KSwgW2NsdXN0ZXJzLCBjdXJyZW50RW50aXR5XSk7XG4gICAgY29uc3QgY3VycmVudEdyb3VwID0gdXNlTWVtbyhcbiAgICAgICAgKCkgPT4gZmluZEN1cnJlbnRHcm91cChjdXJyZW50Q2x1c3Rlcj8uY2hpbGRyZW4sIGN1cnJlbnRFbnRpdHkpLFxuICAgICAgICBbY3VycmVudENsdXN0ZXIsIGN1cnJlbnRFbnRpdHldXG4gICAgKTtcblxuICAgIGNvbnN0IGNsdXN0ZXJTZWxlY3RPcHRpb25zID0gdXNlTWVtbzxTZWxlY3RJdGVtW10+KFxuICAgICAgICAoKSA9PiBjbHVzdGVycy5tYXAoKHtpZCwgbmFtZX0pID0+ICh7bGFiZWw6IG5hbWUsIHZhbHVlOiBpZH0pKSxcbiAgICAgICAgW2NsdXN0ZXJzXVxuICAgICk7XG5cbiAgICBjb25zdCBncm91cFNlbGVjdE9wdGlvbnMgPSB1c2VNZW1vPFNlbGVjdEl0ZW1bXT4oXG4gICAgICAgICgpID0+IGN1cnJlbnRDbHVzdGVyPy5jaGlsZHJlbj8ubWFwKCh7aWQsIG5hbWV9KSA9PiAoe2xhYmVsOiBuYW1lLCB2YWx1ZTogaWR9KSkgfHwgW10sXG4gICAgICAgIFtjdXJyZW50Q2x1c3Rlcl1cbiAgICApO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgc2V0U2VsZWN0ZWRDbHVzdGVyKGN1cnJlbnRDbHVzdGVyKTtcbiAgICAgICAgc2V0U2VsZWN0ZWRHcm91cChjdXJyZW50R3JvdXApO1xuICAgIH0sIFtjdXJyZW50Q2x1c3RlciwgY3VycmVudEdyb3VwXSk7XG5cbiAgICBjb25zdCBoYW5kbGVEZWxldGVCdG5DbGljayA9ICgpID0+IHtcbiAgICAgICAgZGlzcGF0Y2goYWRkSGlzdG9yeUl0ZW0oe3N0YWNrOiBjbHVzdGVycywgdGltZXN0YW1wOiBnZXRUaW1lU3RhbXAoKX0pKTtcblxuICAgICAgICBjb25zdCBub2RlSW5mb3JtYXRpb246IElDaGFuZ2VOb2RlID0ge1xuICAgICAgICAgICAgY2x1c3Rlcjoge2lkOiBjdXJyZW50Q2x1c3Rlcj8uaWQgfHwgbnVsbCwgbmV3SWQ6IGlzR3JvdXBBdmFpbGFibGUgPyBzZWxlY3RlZENsdXN0ZXI/LmlkIDogbnVsbH0sXG4gICAgICAgICAgICBncm91cDogIWlzUHJvZHVjdEF2YWlsYWJsZSA/IGN1cnJlbnRHcm91cCA6ICh7aWQ6IGN1cnJlbnRHcm91cD8uaWQsIG5ld0lkOiBzZWxlY3RlZEdyb3VwPy5pZH0gYXMgSU5vZGVJbmYpLFxuICAgICAgICAgICAgcHJvZHVjdDogaXNQcm9kdWN0QXZhaWxhYmxlID8gY3VycmVudEVudGl0eSA6IG51bGwsXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGlzUHJvZHVjdEF2YWlsYWJsZSkge1xuICAgICAgICAgICAgZGlzcGF0Y2goZGVsZXRlUHJvZHVjdChub2RlSW5mb3JtYXRpb24pKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0dyb3VwQXZhaWxhYmxlKSB7XG4gICAgICAgICAgICBkaXNwYXRjaChkZWxldGVHcm91cChub2RlSW5mb3JtYXRpb24pKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0NsdXN0ZXJBdmFpbGFibGUpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKHVwZGF0ZUNsdXN0ZXJzKGNsdXN0ZXJzLmZpbHRlcihjbHVzdGVyID0+IGNsdXN0ZXIuaWQgIT09IGN1cnJlbnRDbHVzdGVyPy5pZCkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRpc3BhdGNoKHNldEN1cnJlbnRFbnRpdHkobnVsbCkpO1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVHcm91cFNlbGVjdCA9IChzZWxlY3RlZElkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgY29uc3QgZmluZGVkR3JvdXA6IElFbnRpdHkgfCBudWxsID0gY3VycmVudENsdXN0ZXI/LmNoaWxkcmVuPy5maW5kKCh7aWR9KSA9PiBpZCA9PSBzZWxlY3RlZElkKSB8fCBudWxsO1xuXG4gICAgICAgIGlmIChmaW5kZWRHcm91cD8uaWQgPT09IGN1cnJlbnRHcm91cD8uaWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHByZXZQcm9kdWN0TGlzdCA9IGN1cnJlbnRHcm91cD8uY2hpbGRyZW4/LmZpbHRlcigoe2lkfSkgPT4gaWQgIT09IGN1cnJlbnRFbnRpdHk/LmlkKTtcbiAgICAgICAgY29uc3QgdXBkYXRlZFByb2R1Y3RMaXN0ID0gY3VycmVudEVudGl0eSA/IGZpbmRlZEdyb3VwPy5jaGlsZHJlbj8uY29uY2F0KGN1cnJlbnRFbnRpdHkpIDogZmluZGVkR3JvdXA/LmNoaWxkcmVuO1xuXG4gICAgICAgIGNvbnN0IG5ld0NsdXN0ZXJMaXN0ID0gY2x1c3RlcnMubWFwKGNsdXN0ZXIgPT5cbiAgICAgICAgICAgIGNsdXN0ZXIuaWQgPT09IGN1cnJlbnRDbHVzdGVyPy5pZFxuICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgIC4uLmNsdXN0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IGNsdXN0ZXIuY2hpbGRyZW4/Lm1hcChncm91cCA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cC5pZCA9PT0gY3VycmVudEdyb3VwPy5pZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB7Li4uZ3JvdXAsIGNoaWxkcmVuOiBwcmV2UHJvZHVjdExpc3R9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGdyb3VwLmlkID09PSBmaW5kZWRHcm91cD8uaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gey4uLmdyb3VwLCBjaGlsZHJlbjogdXBkYXRlZFByb2R1Y3RMaXN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBncm91cFxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiBjbHVzdGVyXG4gICAgICAgICk7XG5cbiAgICAgICAgc2V0U2VsZWN0ZWRHcm91cChmaW5kZWRHcm91cCk7XG4gICAgICAgIGRpc3BhdGNoKGFkZEhpc3RvcnlJdGVtKHtzdGFjazogY2x1c3RlcnMsIHRpbWVzdGFtcDogZ2V0VGltZVN0YW1wKCl9KSk7XG4gICAgICAgIGRpc3BhdGNoKHVwZGF0ZUNsdXN0ZXJzKG5ld0NsdXN0ZXJMaXN0KSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGhhbmRsZUNsdXN0ZXJTZWxlY3QgPSAoc2VsZWN0ZWRJZDogc3RyaW5nKSA9PiB7XG4gICAgICAgIGNvbnN0IGZpbmRlZENsdXN0ZXIgPSBjbHVzdGVycy5maW5kKCh7aWR9KSA9PiBpZCA9PT0gc2VsZWN0ZWRJZCkgfHwgbnVsbDtcblxuICAgICAgICBpZiAoZmluZGVkQ2x1c3Rlcj8uaWQgPT09IGN1cnJlbnRDbHVzdGVyPy5pZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGN1cnJlbnRFbnRpdHk/LnR5cGUgPT09IEVFbnRpdHlUeXBlLkdyb3VwKSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2R3JvdXBMaXN0ID0gY3VycmVudENsdXN0ZXI/LmNoaWxkcmVuPy5maWx0ZXIoKHtpZH0pID0+IGlkICE9PSBjdXJyZW50RW50aXR5Py5pZCk7XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVkR3JvdXBMaXN0ID0gY3VycmVudEVudGl0eVxuICAgICAgICAgICAgICAgID8gZmluZGVkQ2x1c3Rlcj8uY2hpbGRyZW4/LmNvbmNhdChjdXJyZW50RW50aXR5KVxuICAgICAgICAgICAgICAgIDogZmluZGVkQ2x1c3Rlcj8uY2hpbGRyZW47XG5cbiAgICAgICAgICAgIGNvbnN0IG5ld0NsdXN0ZXJMaXN0ID0gY2x1c3RlcnMubWFwKGNsdXN0ZXIgPT5cbiAgICAgICAgICAgICAgICBjbHVzdGVyLmlkID09PSBjdXJyZW50Q2x1c3Rlcj8uaWRcbiAgICAgICAgICAgICAgICAgICAgPyB7Li4uY2x1c3RlciwgY2hpbGRyZW46IHByZXZHcm91cExpc3R9XG4gICAgICAgICAgICAgICAgICAgIDogY2x1c3Rlci5pZCA9PT0gZmluZGVkQ2x1c3Rlcj8uaWRcbiAgICAgICAgICAgICAgICAgICAgPyB7Li4uY2x1c3RlciwgY2hpbGRyZW46IHVwZGF0ZWRHcm91cExpc3R9XG4gICAgICAgICAgICAgICAgICAgIDogY2x1c3RlclxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgc2V0U2VsZWN0ZWRHcm91cChmaW5kZWRDbHVzdGVyPy5jaGlsZHJlbj8uWzBdIHx8IG51bGwpO1xuICAgICAgICAgICAgc2V0U2VsZWN0ZWRDbHVzdGVyKGZpbmRlZENsdXN0ZXIpO1xuICAgICAgICAgICAgZGlzcGF0Y2goYWRkSGlzdG9yeUl0ZW0oe3N0YWNrOiBjbHVzdGVycywgdGltZXN0YW1wOiBnZXRUaW1lU3RhbXAoKX0pKTtcbiAgICAgICAgICAgIGRpc3BhdGNoKHVwZGF0ZUNsdXN0ZXJzKG5ld0NsdXN0ZXJMaXN0KSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVudEVudGl0eT8udHlwZSA9PT0gRUVudGl0eVR5cGUuUHJvZHVjdCkge1xuICAgICAgICAgICAgY29uc3QgcHJldkdyb3VwTGlzdCA9IGN1cnJlbnRDbHVzdGVyPy5jaGlsZHJlbj8ubWFwKGdyb3VwID0+XG4gICAgICAgICAgICAgICAgZ3JvdXAuaWQgPT09IGN1cnJlbnRHcm91cD8uaWRcbiAgICAgICAgICAgICAgICAgICAgPyB7Li4uZ3JvdXAsIGNoaWxkcmVuOiBncm91cC5jaGlsZHJlbj8uZmlsdGVyKHAgPT4gcC5pZCAhPT0gY3VycmVudEVudGl0eS5pZCl9XG4gICAgICAgICAgICAgICAgICAgIDogZ3JvdXBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVkR3JvdXBMaXN0ID0gY3VycmVudEVudGl0eVxuICAgICAgICAgICAgICAgID8gZmluZGVkQ2x1c3Rlcj8uY2hpbGRyZW4/Lm1hcCgoZ3JvdXAsIGluZGV4KSA9PlxuICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID09PSAwID8gey4uLmdyb3VwLCBjaGlsZHJlbjogZ3JvdXAuY2hpbGRyZW4/LmNvbmNhdChjdXJyZW50RW50aXR5KX0gOiBncm91cFxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIDogZmluZGVkQ2x1c3Rlcj8uY2hpbGRyZW47XG5cbiAgICAgICAgICAgIGNvbnN0IG5ld0NsdXN0ZXJMaXN0ID0gY2x1c3RlcnMubWFwKGNsdXN0ZXIgPT5cbiAgICAgICAgICAgICAgICBjbHVzdGVyLmlkID09PSBjdXJyZW50Q2x1c3Rlcj8uaWRcbiAgICAgICAgICAgICAgICAgICAgPyB7Li4uY2x1c3RlciwgY2hpbGRyZW46IHByZXZHcm91cExpc3R9XG4gICAgICAgICAgICAgICAgICAgIDogY2x1c3Rlci5pZCA9PT0gZmluZGVkQ2x1c3Rlcj8uaWRcbiAgICAgICAgICAgICAgICAgICAgPyB7Li4uY2x1c3RlciwgY2hpbGRyZW46IHVwZGF0ZWRHcm91cExpc3R9XG4gICAgICAgICAgICAgICAgICAgIDogY2x1c3RlclxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgc2V0U2VsZWN0ZWRHcm91cChmaW5kZWRDbHVzdGVyPy5jaGlsZHJlbj8uWzBdIHx8IG51bGwpO1xuICAgICAgICAgICAgc2V0U2VsZWN0ZWRDbHVzdGVyKGZpbmRlZENsdXN0ZXIpO1xuICAgICAgICAgICAgZGlzcGF0Y2goYWRkSGlzdG9yeUl0ZW0oe3N0YWNrOiBjbHVzdGVycywgdGltZXN0YW1wOiBnZXRUaW1lU3RhbXAoKX0pKTtcbiAgICAgICAgICAgIGRpc3BhdGNoKHVwZGF0ZUNsdXN0ZXJzKG5ld0NsdXN0ZXJMaXN0KSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPEdyaWQgZ3Jvdz5cbiAgICAgICAgICAgIHtpc1Byb2R1Y3RBdmFpbGFibGUgJiYgKFxuICAgICAgICAgICAgICAgIDxHcmlkLkNvbD5cbiAgICAgICAgICAgICAgICAgICAgPFRleHRJbnB1dCBsYWJlbD1cItCf0YDQvtC00YPQutGCOlwiIHZhbHVlPXtjdXJyZW50RW50aXR5Py5uYW1lfSBkaXNhYmxlZCAvPlxuICAgICAgICAgICAgICAgIDwvR3JpZC5Db2w+XG4gICAgICAgICAgICApfVxuXG4gICAgICAgICAgICB7aXNHcm91cEF2YWlsYWJsZSAmJiAoXG4gICAgICAgICAgICAgICAgPEdyaWQuQ29sPlxuICAgICAgICAgICAgICAgICAgICB7aXNQcm9kdWN0QXZhaWxhYmxlID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPVwi0JPRgNGD0L/Qv9CwOlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3NlbGVjdGVkR3JvdXA/LmlkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVHcm91cFNlbGVjdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhPXtncm91cFNlbGVjdE9wdGlvbnN9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRJbnB1dCBsYWJlbD1cItCT0YDRg9C/0L/QsDpcIiB2YWx1ZT17Y3VycmVudEdyb3VwPy5uYW1lfSBkaXNhYmxlZCAvPlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDwvR3JpZC5Db2w+XG4gICAgICAgICAgICApfVxuXG4gICAgICAgICAgICB7aXNDbHVzdGVyQXZhaWxhYmxlICYmIChcbiAgICAgICAgICAgICAgICA8R3JpZC5Db2w+XG4gICAgICAgICAgICAgICAgICAgIHtpc0dyb3VwQXZhaWxhYmxlID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPVwi0JrQu9Cw0YHRgtC10YA6XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17c2VsZWN0ZWRDbHVzdGVyPy5pZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2x1c3RlclNlbGVjdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhPXtjbHVzdGVyU2VsZWN0T3B0aW9uc31cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8VGV4dElucHV0IGxhYmVsPVwi0JrQu9Cw0YHRgtC10YA6XCIgdmFsdWU9e2N1cnJlbnRDbHVzdGVyPy5uYW1lfSBkaXNhYmxlZCAvPlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDwvR3JpZC5Db2w+XG4gICAgICAgICAgICApfVxuXG4gICAgICAgICAgICB7Y3VycmVudEVudGl0eT8uaWQgJiYgKFxuICAgICAgICAgICAgICAgIDxHcmlkLkNvbD5cbiAgICAgICAgICAgICAgICAgICAgPFN0YWNrIGFsaWduPVwiY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNvbG9yPVwicmVkXCIgb25DbGljaz17aGFuZGxlRGVsZXRlQnRuQ2xpY2t9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgINCj0LTQsNC70LjRgtGMXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9TdGFjaz5cbiAgICAgICAgICAgICAgICA8L0dyaWQuQ29sPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgPC9HcmlkPlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBFbnRpdHlJbmZvO1xuIiwiaW1wb3J0IHtGQywgdXNlTWVtb30gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge3VzZVNlbGVjdG9yfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcbmltcG9ydCB7c2VsZWN0Q2x1c3RlcnN9IGZyb20gJy4uL3N0b3JlJztcclxuaW1wb3J0IHtCdXR0b24sIENlbnRlcn0gZnJvbSAnQG1hbnRpbmUvY29yZSc7XHJcblxyXG5jb25zdCBFeHBvcnRKc29uOiBGQyA9ICgpID0+IHtcclxuICAgIGNvbnN0IGNsdXN0ZXJzID0gdXNlU2VsZWN0b3Ioc2VsZWN0Q2x1c3RlcnMpO1xyXG5cclxuICAgIGNvbnN0IGxpbmsgPSB1c2VNZW1vKCgpID0+IHtcclxuICAgICAgICBjb25zdCBmaWxlQmxvYiA9IG5ldyBCbG9iKFtKU09OLnN0cmluZ2lmeShjbHVzdGVycyldLCB7dHlwZTogJ3RleHQvcGxhaW4nfSk7XHJcbiAgICAgICAgcmV0dXJuIFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZUJsb2IpO1xyXG4gICAgfSwgW2NsdXN0ZXJzXSk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8Q2VudGVyPlxyXG4gICAgICAgICAgICA8QnV0dG9uIGNvbXBvbmVudD1cImFcIiB2YXJpYW50PVwibGlnaHRcIiBjb2xvcj1cImJsdWVcIiBkb3dubG9hZD1cImV4cG9ydC5qc29uXCIgaHJlZj17bGlua30+XHJcbiAgICAgICAgICAgICAgICDQrdC60YHQv9C+0YDRgtC40YDQvtCy0LDRgtGMIGpzb25cclxuICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgPC9DZW50ZXI+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRXhwb3J0SnNvbjtcclxuIiwiaW1wb3J0IHtHcm91cCwgU2Nyb2xsQXJlYSwgVGV4dCwgQm94LCBTdGFjaywgQnV0dG9uLCBDb2xsYXBzZSwgQ2VudGVyfSBmcm9tICdAbWFudGluZS9jb3JlJztcbmltcG9ydCB7TW91c2VFdmVudEhhbmRsZXIsIEZDLCB1c2VTdGF0ZX0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHt1c2VTZWxlY3RvciwgdXNlRGlzcGF0Y2h9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7Z2V0VGltZVN0YW1wfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQge1xuICAgIHNlbGVjdENsdXN0ZXJzLFxuICAgIHNlbGVjdEhpc3RvcnlTdGFjayxcbiAgICBzZWxlY3RIaXN0b3J5Q3VycmVudEluZGV4LFxuICAgIHVwZGF0ZUNsdXN0ZXJzLFxuICAgIHNldEN1cnJlbnRJbmRleCxcbiAgICBhZGRIaXN0b3J5SXRlbSxcbn0gZnJvbSAnLi4vc3RvcmUnO1xuaW1wb3J0IHVzZU1haW5UaGVtZSBmcm9tICcuLi9ob29rcy91c2VNYWluVGhlbWUnO1xuXG5jb25zdCBIaXN0b3J5OiBGQyA9ICgpID0+IHtcbiAgICBjb25zdCBtYWluVGhlbWUgPSB1c2VNYWluVGhlbWUoKTtcbiAgICBjb25zdCBbaXNDb2xsYXBzZWQsIHNldElzQ29sbGFwc2VkXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICAgIGNvbnN0IGRhdGEgPSB1c2VTZWxlY3RvcihzZWxlY3RDbHVzdGVycyk7XG4gICAgY29uc3QgaGlzdG9yeVJlY29yZHMgPSB1c2VTZWxlY3RvcihzZWxlY3RIaXN0b3J5U3RhY2spO1xuICAgIGNvbnN0IGhpc3RvcnlDdXJyZW50SW5kZXggPSB1c2VTZWxlY3RvcihzZWxlY3RIaXN0b3J5Q3VycmVudEluZGV4KTtcblxuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcblxuICAgIGNvbnN0IGlzSGlzdG9yeVZpc2libGUgPSBoaXN0b3J5UmVjb3Jkcy5sZW5ndGggPiAwO1xuXG4gICAgY29uc3QgaGFuZGxlQ3VycmVudFN0YXRlQ2xpY2s6IE1vdXNlRXZlbnRIYW5kbGVyPEhUTUxCdXR0b25FbGVtZW50PiA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBoaXN0b3J5UmVjb3Jkcy5sZW5ndGggLSAxO1xuICAgICAgICBkaXNwYXRjaCh1cGRhdGVDbHVzdGVycyhoaXN0b3J5UmVjb3Jkc1tpbmRleF0uc3RhY2spKTtcbiAgICAgICAgZGlzcGF0Y2goc2V0Q3VycmVudEluZGV4KGluZGV4KSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGhhbmRsZUhpc3RvcnlDbGljazogTW91c2VFdmVudEhhbmRsZXI8SFRNTERpdkVsZW1lbnQ+ID0gZSA9PiB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gcGFyc2VJbnQoZS5jdXJyZW50VGFyZ2V0LmlkLCAxMCk7XG4gICAgICAgIGlmIChoaXN0b3J5Q3VycmVudEluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgZGlzcGF0Y2goYWRkSGlzdG9yeUl0ZW0oe3N0YWNrOiBkYXRhLCB0aW1lc3RhbXA6IGdldFRpbWVTdGFtcCgpfSkpO1xuICAgICAgICB9XG4gICAgICAgIGRpc3BhdGNoKHVwZGF0ZUNsdXN0ZXJzKGhpc3RvcnlSZWNvcmRzW2luZGV4XS5zdGFjaykpO1xuICAgICAgICBkaXNwYXRjaChzZXRDdXJyZW50SW5kZXgoaW5kZXgpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFN0YWNrPlxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgIHN4PXtfdGhlbWUgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogNDAwLFxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogbWFpblRoZW1lLmZvbnRTaXplLFxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG1haW5UaGVtZS5ncm91cENvbG9yLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogbWFpblRoZW1lLmNvbG9yLFxuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXshaXNIaXN0b3J5VmlzaWJsZX1cbiAgICAgICAgICAgICAgICB2YXJpYW50PVwibGlnaHRcIlxuICAgICAgICAgICAgICAgIGNvbG9yPVwiZ3JheVwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0SXNDb2xsYXBzZWQobyA9PiAhbyl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEdyb3VwIHBvc2l0aW9uPVwiY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxUZXh0PtCY0YHRgtC+0YDQuNGPINC40LfQvNC10L3QtdC90LjQuTwvVGV4dD5cbiAgICAgICAgICAgICAgICA8L0dyb3VwPlxuICAgICAgICAgICAgPC9CdXR0b24+XG5cbiAgICAgICAgICAgIDxDb2xsYXBzZSBpbj17aXNDb2xsYXBzZWR9PlxuICAgICAgICAgICAgICAgIDxTdGFjaz5cbiAgICAgICAgICAgICAgICAgICAgPFNjcm9sbEFyZWEgdHlwZT1cImF1dG9cIiBzdHlsZT17e2hlaWdodDogMzUwLCB3aWR0aDogJzEwMCUnfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7aGlzdG9yeVJlY29yZHMubWFwKChpdGVtLCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpbmRleH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9e2luZGV4LnRvU3RyaW5nKCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUhpc3RvcnlDbGlja31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHg9XCJzbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN4PXt0aGVtZSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID09PSBoaXN0b3J5Q3VycmVudEluZGV4ID8gdGhlbWUuY29sb3JzLmRhcmtbNF0gOiB0aGVtZS5jb2xvcnMuZGFya1s4XSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IHRoZW1lLnNwYWNpbmcueHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnJhZGl1cy54cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiB0aGVtZS5zcGFjaW5nLnhzLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG1haW5UaGVtZS5jb2xvckhvdmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8R3JvdXAgcG9zaXRpb249XCJhcGFydFwiIGdyb3c+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dD57YNCS0LXRgNGB0LjRjyAtICR7aW5kZXh9YH08L1RleHQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dD57aXRlbS50aW1lc3RhbXB9PC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0dyb3VwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgICAgIDwvU2Nyb2xsQXJlYT5cblxuICAgICAgICAgICAgICAgICAgICB7aGlzdG9yeUN1cnJlbnRJbmRleCAhPT0gLTEgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgPENlbnRlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPVwiZ3JheVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJzdWJ0bGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVDdXJyZW50U3RhdGVDbGlja31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3g9e190aGVtZSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogNDAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IG1haW5UaGVtZS5mb250U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDQktC10YDQvdGD0YLRjCDQsNC60YLRg9Cw0LvRjNC90YPRjiDQstC10YDRgdC40Y5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ2VudGVyPlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDwvU3RhY2s+XG4gICAgICAgICAgICA8L0NvbGxhcHNlPlxuICAgICAgICA8L1N0YWNrPlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBIaXN0b3J5O1xuIiwiaW1wb3J0IHtCdXR0b259IGZyb20gJ0BtYW50aW5lL2NvcmUnO1xuaW1wb3J0IEFqdiwge0pTT05TY2hlbWFUeXBlfSBmcm9tICdhanYnO1xuaW1wb3J0IHtGQywgdXNlUmVmLCBDaGFuZ2VFdmVudEhhbmRsZXJ9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7dXNlU2VsZWN0b3IsIHVzZURpc3BhdGNofSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge3NlbGVjdENsdXN0ZXJzLCBhZGRIaXN0b3J5SXRlbSwgdXBkYXRlQ2x1c3RlcnN9IGZyb20gJy4uL3N0b3JlJztcbmltcG9ydCB7SUVudGl0eX0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHtnZXRUaW1lU3RhbXB9IGZyb20gJy4uL3V0aWxzJztcblxuY29uc3Qgc2NoZW1hOiBKU09OU2NoZW1hVHlwZTxJRW50aXR5W10+ID0ge1xuICAgIHR5cGU6ICdhcnJheScsXG4gICAgaXRlbXM6IHtcbiAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGlkOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGlsZHJlbjoge1xuICAgICAgICAgICAgICAgICRyZWY6ICcjJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHJlcXVpcmVkOiBbJ2lkJywgJ25hbWUnLCAndHlwZSddLFxuICAgIH0sXG4gICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IGZhbHNlLFxufTtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgb25JbXBvcnRGaWxlOiAoaXNTdWNjZXNzOiBib29sZWFuKSA9PiB2b2lkO1xufVxuXG5jb25zdCBJbXBvcnRKc29uOiBGQzxJUHJvcHM+ID0gKHtvbkltcG9ydEZpbGV9KSA9PiB7XG4gICAgY29uc3QgZmlsZUlucHV0ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuXG4gICAgY29uc3QgY2x1c3RlcnMgPSB1c2VTZWxlY3RvcihzZWxlY3RDbHVzdGVycyk7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuXG4gICAgY29uc3QgaGFuZGxlSW1wb3J0RmlsZSA9ICgpID0+IHtcbiAgICAgICAgZmlsZUlucHV0LmN1cnJlbnQ/LmNsaWNrKCk7XG4gICAgfTtcblxuICAgIGNvbnN0IG9uQ2hhbmdlRmlsZTogQ2hhbmdlRXZlbnRIYW5kbGVyPEhUTUxJbnB1dEVsZW1lbnQ+ID0gYXN5bmMgZXZlbnQgPT4ge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBvbkltcG9ydEZpbGUoZmFsc2UpO1xuXG4gICAgICAgIGNvbnN0IGZpbGUgPSBldmVudC5jdXJyZW50VGFyZ2V0LmZpbGVzPy5bMF0gfHwgbnVsbDtcbiAgICAgICAgY29uc3QgZmlsZVRleHQgPSBhd2FpdCBmaWxlPy50ZXh0KCk7XG4gICAgICAgIGNvbnN0IHBhcnNlZEZpbGUgPSBmaWxlVGV4dCA/IEpTT04ucGFyc2UoZmlsZVRleHQpIDogbnVsbDtcblxuICAgICAgICBpZiAoZmlsZUlucHV0LmN1cnJlbnQ/LnZhbHVlKSB7XG4gICAgICAgICAgICBmaWxlSW5wdXQuY3VycmVudC52YWx1ZSA9ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYWp2ID0gbmV3IEFqdigpO1xuXG4gICAgICAgIGNvbnN0IHZhbGlkYXRlID0gYWp2LmNvbXBpbGUoc2NoZW1hKTtcblxuICAgICAgICBpZiAodmFsaWRhdGUocGFyc2VkRmlsZSkpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKGFkZEhpc3RvcnlJdGVtKHtzdGFjazogY2x1c3RlcnMsIHRpbWVzdGFtcDogZ2V0VGltZVN0YW1wKCl9KSk7XG4gICAgICAgICAgICBkaXNwYXRjaCh1cGRhdGVDbHVzdGVycyhwYXJzZWRGaWxlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvbkltcG9ydEZpbGUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwibGlnaHRcIiBjb2xvcj1cImJsdWVcIiBvbkNsaWNrPXtoYW5kbGVJbXBvcnRGaWxlfT5cbiAgICAgICAgICAgINCY0LzQv9C+0YDRgtC40YDQvtCy0LDRgtGMIGpzb25cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIHR5cGU9XCJmaWxlXCJcbiAgICAgICAgICAgICAgICBpZD1cImZpbGVcIlxuICAgICAgICAgICAgICAgIGFjY2VwdD1cIi5qc29uXCJcbiAgICAgICAgICAgICAgICByZWY9e2ZpbGVJbnB1dH1cbiAgICAgICAgICAgICAgICBzdHlsZT17e2Rpc3BsYXk6ICdub25lJ319XG4gICAgICAgICAgICAgICAgb25JbnB1dD17b25DaGFuZ2VGaWxlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgPC9CdXR0b24+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEltcG9ydEpzb247XG4iLCJpbXBvcnQge0pzb25JbnB1dH0gZnJvbSAnQG1hbnRpbmUvY29yZSc7XG5pbXBvcnQge0ZDLCB1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3VzZVNlbGVjdG9yfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge3NlbGVjdENsdXN0ZXJzfSBmcm9tICcuLi9zdG9yZSc7XG5cbmNvbnN0IEpzb25FZGl0b3I6IEZDID0gKCkgPT4ge1xuICAgIGNvbnN0IGNsdXN0ZXJzID0gdXNlU2VsZWN0b3Ioc2VsZWN0Q2x1c3RlcnMpO1xuICAgIGNvbnN0IGNsdXN0ZXJzSnNvbiA9IHVzZU1lbW8oKCkgPT4gSlNPTi5zdHJpbmdpZnkoY2x1c3RlcnMsIG51bGwsIDEpLCBbY2x1c3RlcnNdKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxKc29uSW5wdXRcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiW11cIlxuICAgICAgICAgICAgdmFsaWRhdGlvbkVycm9yPVwi0J3QtdC60L7RgNGA0LXQutGC0L3Ri9C5IGpzb25cIlxuICAgICAgICAgICAgZm9ybWF0T25CbHVyXG4gICAgICAgICAgICBhdXRvc2l6ZVxuICAgICAgICAgICAgbWluUm93cz17NDJ9XG4gICAgICAgICAgICB2YWx1ZT17Y2x1c3RlcnNKc29ufVxuICAgICAgICAgICAgZGlzYWJsZWRcbiAgICAgICAgLz5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSnNvbkVkaXRvcjtcbiIsImltcG9ydCB7R3JpZCwgVGV4dCwgUGFwZXJ9IGZyb20gJ0BtYW50aW5lL2NvcmUnO1xuaW1wb3J0IHtGQ30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtEcm9wcGFibGV9IGZyb20gJ3JlYWN0LWJlYXV0aWZ1bC1kbmQnO1xuaW1wb3J0IHVzZU1haW5UaGVtZSBmcm9tICcuLi9ob29rcy91c2VNYWluVGhlbWUnO1xuaW1wb3J0IHtJRW50aXR5fSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgVHJlZUxlYWYgZnJvbSAnLi9UcmVlTGVhZic7XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIGVudGl0eTogSUVudGl0eTtcbn1cblxuY29uc3QgVHJlZUJyYW5jaDogRkM8SVByb3BzPiA9ICh7ZW50aXR5fSkgPT4ge1xuICAgIGNvbnN0IG1haW5UaGVtZSA9IHVzZU1haW5UaGVtZSgpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPERyb3BwYWJsZSBkcm9wcGFibGVJZD17ZW50aXR5LmlkfSB0eXBlPXtlbnRpdHkudHlwZX0+XG4gICAgICAgICAgICB7cHJvdmlkZWQgPT4gKFxuICAgICAgICAgICAgICAgIDxkaXYgey4uLnByb3ZpZGVkLmRyb3BwYWJsZVByb3BzfSByZWY9e3Byb3ZpZGVkLmlubmVyUmVmfT5cbiAgICAgICAgICAgICAgICAgICAgPEdyaWQgZ3Jvdz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkLkNvbCBzeD17e21hcmdpbkJvdHRvbTogMTB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UGFwZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhZG93PVwic21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYj1cIm1kXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3g9eygpID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG1haW5UaGVtZS5jbHVzdGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogbWFpblRoZW1lLmNvbG9yU2Vjb25kYXJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogJzEwcHggOHB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyMzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJiAubWFudGluZS1UZXh0LXJvb3QnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICcwIDhweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IG1haW5UaGVtZS5mb250U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBtYWluVGhlbWUuZm90bldlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHQgYWxpZ249XCJsZWZ0XCI+e2VudGl0eS5uYW1lfTwvVGV4dD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1BhcGVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtlbnRpdHkuY2hpbGRyZW4/Lm1hcCgoaXRlbSwgaSkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHJlZUxlYWYga2V5PXtpdGVtLmlkfSBlbnRpdHk9e2l0ZW19IGluZGV4PXtpfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkLkNvbD5cbiAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgICAgICB7cHJvdmlkZWQucGxhY2Vob2xkZXJ9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICA8L0Ryb3BwYWJsZT5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVHJlZUJyYW5jaDtcbiIsImltcG9ydCB7R3JpZCwgUGFwZXIsIEFjdGlvbkljb24sIENvbGxhcHNlLCBUZXh0fSBmcm9tICdAbWFudGluZS9jb3JlJztcbmltcG9ydCB7RkMsIHVzZVN0YXRlfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge0RyYWdnYWJsZSwgRHJvcHBhYmxlfSBmcm9tICdyZWFjdC1iZWF1dGlmdWwtZG5kJztcbmltcG9ydCB7TWludXMsIFBsdXN9IGZyb20gJ3RhYmxlci1pY29ucy1yZWFjdCc7XG5pbXBvcnQgdXNlTWFpblRoZW1lIGZyb20gJy4uL2hvb2tzL3VzZU1haW5UaGVtZSc7XG5pbXBvcnQge0VFbnRpdHlUeXBlfSBmcm9tICcuLi9lbnVtcyc7XG5pbXBvcnQge0lFbnRpdHl9IGZyb20gJy4uL3R5cGVzJztcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgZW50aXR5OiBJRW50aXR5O1xuICAgIGluZGV4OiBudW1iZXI7XG59XG5cbmNvbnN0IFRyZWVMZWFmOiBGQzxJUHJvcHM+ID0gKHtlbnRpdHksIGluZGV4fSkgPT4ge1xuICAgIGNvbnN0IFtpc09wZW5lZCwgc2V0SXNPcGVuZWRdID0gdXNlU3RhdGUodHJ1ZSk7XG4gICAgY29uc3QgbWFpblRoZW1lID0gdXNlTWFpblRoZW1lKCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8RHJhZ2dhYmxlIGtleT17ZW50aXR5LmlkfSBkcmFnZ2FibGVJZD17ZW50aXR5LmlkfSBpbmRleD17aW5kZXh9PlxuICAgICAgICAgICAge3Byb3ZpZGVkID0+IChcbiAgICAgICAgICAgICAgICA8ZGl2IHsuLi5wcm92aWRlZC5kcmFnZ2FibGVQcm9wc30gey4uLnByb3ZpZGVkLmRyYWdIYW5kbGVQcm9wc30gcmVmPXtwcm92aWRlZC5pbm5lclJlZn0+XG4gICAgICAgICAgICAgICAgICAgIDxEcm9wcGFibGUgZHJvcHBhYmxlSWQ9e2VudGl0eS5pZH0gdHlwZT17ZW50aXR5LnR5cGV9PlxuICAgICAgICAgICAgICAgICAgICAgICAge3Byb3ZpZGVkID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHsuLi5wcm92aWRlZC5kcm9wcGFibGVQcm9wc30gcmVmPXtwcm92aWRlZC5pbm5lclJlZn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkIGdyb3cgc3g9e3ttYXJnaW5MZWZ0OiAyMn19PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWQuQ29sPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQYXBlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFkb3c9XCJzbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN4PXsoKSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eS50eXBlID09IEVFbnRpdHlUeXBlLlByb2R1Y3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAndHJhbnNwYXJlbnQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbWFpblRoZW1lLmdyb3VwQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHkudHlwZSA9PSBFRW50aXR5VHlwZS5Qcm9kdWN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3JnYmEoMjU1LCAyNTUsIDI1NSwwLjcpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG1haW5UaGVtZS5jb2xvcixcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiBlbnRpdHkudHlwZSA9PSBFRW50aXR5VHlwZS5Qcm9kdWN0ID8gMCA6IDEwLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiA1LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGVudGl0eS50eXBlID09IEVFbnRpdHlUeXBlLlByb2R1Y3QgPyAxNjggOiAyMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IGVudGl0eS50eXBlID09IEVFbnRpdHlUeXBlLlByb2R1Y3QgPyBtYWluVGhlbWUuYm9yZGVyIDogJycsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcmIC5tYW50aW5lLVRleHQtcm9vdCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogJzAgOHB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogbWFpblRoZW1lLmZvbnRTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IG1haW5UaGVtZS5mb3RuV2VpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBtYWluVGhlbWUuY29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBtYWluVGhlbWUuY29sb3JIb3ZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2VudGl0eS50eXBlID09PSBFRW50aXR5VHlwZS5Hcm91cCAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWN0aW9uSWNvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJ0cmFuc3BhcmVudFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0SXNPcGVuZWQocHJldiA9PiAhcHJldil9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2lzT3BlbmVkID8gPE1pbnVzIHNpemU9ezE0fSAvPiA6IDxQbHVzIHNpemU9ezE0fSAvPn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQWN0aW9uSWNvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHQgYWxpZ249XCJsZWZ0XCI+e2VudGl0eS5uYW1lfTwvVGV4dD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1BhcGVyPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2VudGl0eS50eXBlID09PSBFRW50aXR5VHlwZS5Hcm91cCAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDb2xsYXBzZSBpbj17aXNPcGVuZWR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2VudGl0eS5jaGlsZHJlbj8ubWFwKChpdGVtLCBpKSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRyZWVMZWFmIGtleT17aXRlbS5pZH0gZW50aXR5PXtpdGVtfSBpbmRleD17aX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0NvbGxhcHNlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWQuQ29sPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtwcm92aWRlZC5wbGFjZWhvbGRlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIDwvRHJvcHBhYmxlPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgPC9EcmFnZ2FibGU+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRyZWVMZWFmO1xuIiwiaW1wb3J0IHtGQ30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtEcmFnRHJvcENvbnRleHQsIERyb3BSZXN1bHR9IGZyb20gJ3JlYWN0LWJlYXV0aWZ1bC1kbmQnO1xuaW1wb3J0IHt1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3J9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7YWRkSGlzdG9yeUl0ZW0sIHNlbGVjdENsdXN0ZXJzLCB1cGRhdGVDbHVzdGVyc30gZnJvbSAnLi4vc3RvcmUnO1xuaW1wb3J0IHtnZXRSZW9kZXJlZExpc3QsIGdldFRpbWVTdGFtcH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IFRyZWVCcmFuY2ggZnJvbSAnLi9UcmVlQnJhbmNoJztcblxuY29uc3QgVHJlZVBhbmVsOiBGQyA9ICgpID0+IHtcbiAgICBjb25zdCBjbHVzdGVycyA9IHVzZVNlbGVjdG9yKHNlbGVjdENsdXN0ZXJzKTtcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG5cbiAgICBjb25zdCBvbkRyYWdFbmQgPSAocmVzdWx0OiBEcm9wUmVzdWx0KSA9PiB7XG4gICAgICAgIGNvbnN0IGlzSW52YWxpZERyb3A6IGJvb2xlYW4gPVxuICAgICAgICAgICAgIXJlc3VsdC5kZXN0aW5hdGlvbiB8fFxuICAgICAgICAgICAgKHJlc3VsdC5zb3VyY2UuZHJvcHBhYmxlSWQgPT09IHJlc3VsdC5kZXN0aW5hdGlvbi5kcm9wcGFibGVJZCAmJlxuICAgICAgICAgICAgICAgIHJlc3VsdC5zb3VyY2UuaW5kZXggPT09IHJlc3VsdC5kZXN0aW5hdGlvbi5pbmRleCk7XG5cbiAgICAgICAgaWYgKGlzSW52YWxpZERyb3ApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGRpc3BhdGNoKGFkZEhpc3RvcnlJdGVtKHtzdGFjazogY2x1c3RlcnMsIHRpbWVzdGFtcDogZ2V0VGltZVN0YW1wKCl9KSk7XG4gICAgICAgIGRpc3BhdGNoKHVwZGF0ZUNsdXN0ZXJzKGdldFJlb2RlcmVkTGlzdChjbHVzdGVycywgcmVzdWx0KSkpO1xuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8RHJhZ0Ryb3BDb250ZXh0IG9uRHJhZ0VuZD17b25EcmFnRW5kfT5cbiAgICAgICAgICAgIHtjbHVzdGVycy5tYXAoaXRlbSA9PiAoXG4gICAgICAgICAgICAgICAgPFRyZWVCcmFuY2gga2V5PXtpdGVtLmlkfSBlbnRpdHk9e2l0ZW19IC8+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgPC9EcmFnRHJvcENvbnRleHQ+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRyZWVQYW5lbDtcbiIsImV4cG9ydCBlbnVtIEVFbnRpdHlUeXBlIHtcbiAgICBDbHVzdGVyID0gJ2NsdXN0ZXInLFxuICAgIEdyb3VwID0gJ2dyb3VwJyxcbiAgICBQcm9kdWN0ID0gJ3Byb2R1Y3QnLFxufVxuIiwiaW1wb3J0IHt1c2VNYW50aW5lVGhlbWV9IGZyb20gJ0BtYW50aW5lL2NvcmUnO1xuaW1wb3J0IHt1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IHVzZU1haW5UaGVtZSA9ICgpID0+IHtcbiAgICBjb25zdCB0aGVtZSA9IHVzZU1hbnRpbmVUaGVtZSgpO1xuXG4gICAgcmV0dXJuIHVzZU1lbW8oXG4gICAgICAgICgpID0+ICh7XG4gICAgICAgICAgICBjbHVzdGVyQ29sb3I6IHRoZW1lLmZuLnJnYmEodGhlbWUuY29sb3JzLmdyYXlbN10sIDAuNDUpLFxuICAgICAgICAgICAgZ3JvdXBDb2xvcjogdGhlbWUuZm4ucmdiYSh0aGVtZS5jb2xvcnMuZ3JheVs3XSwgMC4yMiksXG4gICAgICAgICAgICBjb2xvckhvdmVyOiB0aGVtZS5mbi5yZ2JhKHRoZW1lLmNvbG9ycy5ibHVlWzldLCAwLjIxKSxcbiAgICAgICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvcnMuZ3JheVswXSxcbiAgICAgICAgICAgIGNvbG9yU2Vjb25kYXJ5OiB0aGVtZS5mbi5yZ2JhKHRoZW1lLmNvbG9ycy5ncmF5WzBdLCAwLjQ5KSxcbiAgICAgICAgICAgIGZvbnRTaXplOiAxNCxcbiAgICAgICAgICAgIGZvdG5XZWlnaHQ6IDMwMCxcbiAgICAgICAgICAgIGJvcmRlcjogYDFweCBzb2xpZCAke3RoZW1lLmNvbG9ycy5ncmF5WzddfWAsXG4gICAgICAgIH0pLFxuICAgICAgICBbdGhlbWVdXG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZU1haW5UaGVtZTtcbiIsImltcG9ydCB7XG4gICAgQXBwU2hlbGwsXG4gICAgQXNpZGUsXG4gICAgQnV0dG9uLFxuICAgIERyYXdlcixcbiAgICBHcmlkLFxuICAgIEdyb3VwLFxuICAgIEhlYWRlcixcbiAgICBNYW50aW5lUHJvdmlkZXIsXG4gICAgTmF2YmFyLFxuICAgIFRpdGxlLFxuICAgIFNjcm9sbEFyZWEsXG4gICAgTm90aWZpY2F0aW9uLFxuICAgIFNwYWNlLFxufSBmcm9tICdAbWFudGluZS9jb3JlJztcbmltcG9ydCB7dXNlU3RhdGUsIEZDfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2NyZWF0ZVJvb3R9IGZyb20gJ3JlYWN0LWRvbS9jbGllbnQnO1xuaW1wb3J0IHtQcm92aWRlcn0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHtYfSBmcm9tICd0YWJsZXItaWNvbnMtcmVhY3QnO1xuaW1wb3J0IHtzdG9yZX0gZnJvbSAnLi4vc3RvcmUnO1xuaW1wb3J0IERlbmRyb2dyYW1MaXN0IGZyb20gJy4uL2NvbXBvbmVudHMvRGVuZHJvZ3JhbUxpc3QnO1xuaW1wb3J0IEVudGl0eUluZm8gZnJvbSAnLi4vY29tcG9uZW50cy9FbnRpdHlJbmZvJztcbmltcG9ydCBIaXN0b3J5IGZyb20gJy4uL2NvbXBvbmVudHMvSGlzdG9yeSc7XG5pbXBvcnQgSnNvbkVkaXRvciBmcm9tICcuLi9jb21wb25lbnRzL0pzb25FZGl0b3InO1xuaW1wb3J0IEltcG9ydEpzb24gZnJvbSAnLi4vY29tcG9uZW50cy9JbXBvcnRKc29uJztcbmltcG9ydCBFeHBvcnRKc29uIGZyb20gJy4uL2NvbXBvbmVudHMvRXhwb3J0SnNvbic7XG5pbXBvcnQgVHJlZVBhbmVsIGZyb20gJy4uL2NvbXBvbmVudHMvVHJlZVBhbmVsJztcbmltcG9ydCAnLi4vc3R5bGVzL3Jlc2V0LmNzcyc7XG5pbXBvcnQgJy4uL3N0eWxlcy9hcHAuY3NzJztcblxuY29uc3QgTWFpbjogRkMgPSAoKSA9PiB7XG4gICAgY29uc3QgW2lzRHJhd2VyT3BlbmVkLCBzZXRJc0RyYXdlck9wZW5lZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgW2hhc0ludmFsaWRJbXBvcnQsIHNldEhhc0ludmFsaWRJbXBvcnRdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gICAgY29uc3QgaGFuZGxlQ2xvc2VEcmF3ZXIgPSAoKSA9PiBzZXRJc0RyYXdlck9wZW5lZChmYWxzZSk7XG4gICAgY29uc3QgaGFuZGxlT3BlbkRyYXdlciA9ICgpID0+IHNldElzRHJhd2VyT3BlbmVkKHRydWUpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgICAgICAgICA8TWFudGluZVByb3ZpZGVyIHRoZW1lPXt7Zm9udEZhbWlseTogJ1JvYm90bycsIGNvbG9yU2NoZW1lOiAnZGFyayd9fT5cbiAgICAgICAgICAgICAgICA8QXBwU2hlbGxcbiAgICAgICAgICAgICAgICAgICAgZml4ZWRcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZz1cIm1kXCJcbiAgICAgICAgICAgICAgICAgICAgbmF2YmFyPXtcbiAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZiYXIgd2lkdGg9e3tiYXNlOiAzMDB9fSBwPVwieHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmF2YmFyLlNlY3Rpb24gZ3JvdyBtdD1cIm1kXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTY3JvbGxBcmVhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e2hlaWdodDogd2luZG93LnNjcmVlbi5oZWlnaHQgLSAyNDAsIHdpZHRoOiAnMTAwJSd9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0U2Nyb2xsYmFyc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHJlZVBhbmVsIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvU2Nyb2xsQXJlYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L05hdmJhci5TZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9OYXZiYXI+XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyPXtcbiAgICAgICAgICAgICAgICAgICAgICAgIDxIZWFkZXIgaGVpZ2h0PXs2MH0gcD1cInhzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEdyb3VwIHBvc2l0aW9uPVwiYXBhcnRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRpdGxlIG9yZGVyPXszfT5Qcm9qZWN0IERlbmRybzwvVGl0bGU+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEdyb3VwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEltcG9ydEpzb24gb25JbXBvcnRGaWxlPXtpc1N1Y2Nlc3MgPT4gc2V0SGFzSW52YWxpZEltcG9ydChpc1N1Y2Nlc3MpfSAvPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJsaWdodFwiIGNvbG9yPVwiZ3JheVwiIG9uQ2xpY2s9e2hhbmRsZU9wZW5EcmF3ZXJ9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgINCf0L7RgdC80L7RgtGA0LXRgtGMIGpzb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0dyb3VwPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEcmF3ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5lZD17aXNEcmF3ZXJPcGVuZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsb3NlPXtoYW5kbGVDbG9zZURyYXdlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwi0KHRhdC10LzQsCBqc29uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc9XCJ4bFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPVwibWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2Nyb2xsQXJlYSB0eXBlPVwiYXV0b1wiIHN0eWxlPXt7aGVpZ2h0OiB3aW5kb3cuc2NyZWVuLmhlaWdodCAtIDI4MH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxKc29uRWRpdG9yIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1Njcm9sbEFyZWE+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTcGFjZSBoPVwibWRcIiAvPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RXhwb3J0SnNvbiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0RyYXdlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0dyb3VwPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9IZWFkZXI+XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXNpZGU9e1xuICAgICAgICAgICAgICAgICAgICAgICAgPEFzaWRlIGZpeGVkIHA9XCJtZFwiIGhpZGRlbkJyZWFrcG9pbnQ9XCJzbVwiIHdpZHRoPXt7c206IDIwMCwgbGc6IDMwMH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBc2lkZS5TZWN0aW9uIGdyb3c+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxFbnRpdHlJbmZvIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTcGFjZSBoPVwibWRcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQXNpZGUuU2VjdGlvbj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBc2lkZS5TZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SGlzdG9yeSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQXNpZGUuU2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQXNpZGU+XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHtoYXNJbnZhbGlkSW1wb3J0ICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxOb3RpZmljYXRpb24gaWNvbj17PFggc2l6ZT17MTh9IC8+fSBjb2xvcj1cInJlZFwiIG9uQ2xvc2U9eygpID0+IHNldEhhc0ludmFsaWRJbXBvcnQoZmFsc2UpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICDQndC10LrQvtGA0YDQtdC60YLQvdCw0Y8g0YHRhdC10LzQsCFcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTm90aWZpY2F0aW9uPlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICA8R3JpZCBncm93IGd1dHRlcj1cInNtXCIganVzdGlmeT1cImNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWQuQ29sPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEZW5kcm9ncmFtTGlzdCAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkLkNvbD5cbiAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgIDwvQXBwU2hlbGw+XG4gICAgICAgICAgICA8L01hbnRpbmVQcm92aWRlcj5cbiAgICAgICAgPC9Qcm92aWRlcj5cbiAgICApO1xufTtcblxuY29uc3Qgcm9vdCA9IGNyZWF0ZVJvb3QoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcCcpISk7XG5yb290LnJlbmRlcig8TWFpbiAvPik7XG4iLCJpbXBvcnQge2NyZWF0ZVNsaWNlLCBQYXlsb2FkQWN0aW9ufSBmcm9tICdAcmVkdXhqcy90b29sa2l0JztcbmltcG9ydCB7SUVudGl0eSwgSUNoYW5nZU5vZGUsIElOb2RlSW5mfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgZGF0YSBmcm9tICcuLi9zdGF0aWMvZGIuanNvbic7XG5cbmNvbnN0IGNsdXN0ZXJTbGljZSA9IGNyZWF0ZVNsaWNlKHtcbiAgICBuYW1lOiAnY2x1c3RlcnMnLFxuICAgIGluaXRpYWxTdGF0ZTogZGF0YSBhcyBJRW50aXR5W10sXG4gICAgcmVkdWNlcnM6IHtcbiAgICAgICAgZGVsZXRlUHJvZHVjdChzdGF0ZSwgYWN0aW9uOiBQYXlsb2FkQWN0aW9uPElDaGFuZ2VOb2RlPikge1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlLm1hcChjbHVzdGVyID0+XG4gICAgICAgICAgICAgICAgY2x1c3Rlci5pZCA9PT0gYWN0aW9uLnBheWxvYWQuY2x1c3Rlci5pZFxuICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uY2x1c3RlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IGNsdXN0ZXIuY2hpbGRyZW4/Lm1hcChncm91cCA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAuaWQgPT09IGFjdGlvbi5wYXlsb2FkLmdyb3VwPy5pZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmdyb3VwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBncm91cC5jaGlsZHJlbj8uZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0ID0+IHByb2R1Y3QuaWQgIT09IGFjdGlvbi5wYXlsb2FkLnByb2R1Y3Q/LmlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGdyb3VwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6IGNsdXN0ZXJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIGFkZFByb2R1Y3Qoc3RhdGUsIGFjdGlvbjogUGF5bG9hZEFjdGlvbjxJQ2hhbmdlTm9kZT4pIHtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5tYXAoY2x1c3RlciA9PlxuICAgICAgICAgICAgICAgIGNsdXN0ZXIuaWQgPT09IGFjdGlvbi5wYXlsb2FkLmNsdXN0ZXIubmV3SWRcbiAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmNsdXN0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBjbHVzdGVyLmNoaWxkcmVuPy5tYXAoZ3JvdXAgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF5bG9hZF9ncm91cCA9IGFjdGlvbi5wYXlsb2FkLmdyb3VwIGFzIElOb2RlSW5mO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ3JvdXAuaWQgPT09IHBheWxvYWRfZ3JvdXA/Lm5ld0lkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZ3JvdXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFsuLi4oZ3JvdXAuY2hpbGRyZW4gfHwgW10pLCBhY3Rpb24ucGF5bG9hZC5wcm9kdWN0IGFzIElFbnRpdHldLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZ3JvdXA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiBjbHVzdGVyXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBkZWxldGVHcm91cChzdGF0ZSwgYWN0aW9uOiBQYXlsb2FkQWN0aW9uPElDaGFuZ2VOb2RlPikge1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlLm1hcChjbHVzdGVyID0+XG4gICAgICAgICAgICAgICAgY2x1c3Rlci5pZCA9PT0gYWN0aW9uLnBheWxvYWQuY2x1c3Rlci5pZFxuICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uY2x1c3RlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IGNsdXN0ZXIuY2hpbGRyZW4/LmZpbHRlcihncm91cCA9PiBncm91cC5pZCAhPT0gYWN0aW9uLnBheWxvYWQuZ3JvdXA/LmlkKSxcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDogY2x1c3RlclxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgYWRkR3JvdXAoc3RhdGUsIGFjdGlvbjogUGF5bG9hZEFjdGlvbjxJQ2hhbmdlTm9kZT4pIHtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5tYXAoY2x1c3RlciA9PlxuICAgICAgICAgICAgICAgIGNsdXN0ZXIuaWQgPT09IGFjdGlvbi5wYXlsb2FkLmNsdXN0ZXIubmV3SWRcbiAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmNsdXN0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbLi4uKGNsdXN0ZXIuY2hpbGRyZW4gfHwgW10pLCBhY3Rpb24ucGF5bG9hZC5ncm91cCBhcyBJRW50aXR5XSxcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDogY2x1c3RlclxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlQ2x1c3RlcnMoX3N0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248SUVudGl0eVtdPikge1xuICAgICAgICAgICAgcmV0dXJuIGFjdGlvbi5wYXlsb2FkO1xuICAgICAgICB9LFxuICAgIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgY2x1c3RlclNsaWNlO1xuIiwiaW1wb3J0IHtjcmVhdGVTbGljZSwgUGF5bG9hZEFjdGlvbn0gZnJvbSAnQHJlZHV4anMvdG9vbGtpdCc7XG5pbXBvcnQge0lFbnRpdHl9IGZyb20gJy4uL3R5cGVzJztcblxuaW50ZXJmYWNlIElFbnRpdHlJbmZvIHtcbiAgICBjdXJyZW50RW50aXR5OiBJRW50aXR5IHwgbnVsbDtcbn1cblxuY29uc3QgaW5pdGlhbFN0YXRlOiBJRW50aXR5SW5mbyA9IHtcbiAgICBjdXJyZW50RW50aXR5OiBudWxsLFxufTtcblxuY29uc3QgZW50aXR5SW5mb1NsaWNlID0gY3JlYXRlU2xpY2Uoe1xuICAgIG5hbWU6ICdlbnRpdHlJbmZvU2xpY2UnLFxuICAgIGluaXRpYWxTdGF0ZSxcbiAgICByZWR1Y2Vyczoge1xuICAgICAgICBzZXRDdXJyZW50RW50aXR5KHN0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248SUVudGl0eSB8IG51bGw+KSB7XG4gICAgICAgICAgICByZXR1cm4gey4uLnN0YXRlLCBjdXJyZW50RW50aXR5OiBhY3Rpb24ucGF5bG9hZH07XG4gICAgICAgIH0sXG4gICAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBlbnRpdHlJbmZvU2xpY2U7XG4iLCJpbXBvcnQge2NyZWF0ZVNsaWNlLCBQYXlsb2FkQWN0aW9ufSBmcm9tICdAcmVkdXhqcy90b29sa2l0JztcbmltcG9ydCB7SUVudGl0eX0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbnRlcmZhY2UgSUVudGl0eUhpc3Rvcnkge1xuICAgIHN0YWNrOiBJRW50aXR5W107XG4gICAgdGltZXN0YW1wOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBJSGlzdG9yeSB7XG4gICAgY3VycmVudEluZGV4OiBudW1iZXI7XG4gICAgdGltZVN0YWNrOiBJRW50aXR5SGlzdG9yeVtdO1xufVxuXG5jb25zdCBpbml0aWFsU3RhdGU6IElIaXN0b3J5ID0ge1xuICAgIGN1cnJlbnRJbmRleDogLTEsXG4gICAgdGltZVN0YWNrOiBbXSxcbn07XG5cbmNvbnN0IGhpc3RvcnlTbGljZSA9IGNyZWF0ZVNsaWNlKHtcbiAgICBuYW1lOiAnaGlzdG9yeScsXG4gICAgaW5pdGlhbFN0YXRlLFxuICAgIHJlZHVjZXJzOiB7XG4gICAgICAgIGFkZEhpc3RvcnlJdGVtKHN0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248SUVudGl0eUhpc3Rvcnk+KSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUuY3VycmVudEluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHN0YXRlLnRpbWVTdGFjay5wdXNoKGFjdGlvbi5wYXlsb2FkKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGF0ZS50aW1lU3RhY2subGVuZ3RoID0gc3RhdGUuY3VycmVudEluZGV4ICsgMTtcbiAgICAgICAgICAgIHN0YXRlLnRpbWVTdGFja1tzdGF0ZS5jdXJyZW50SW5kZXhdID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgICAgICAgICBzdGF0ZS5jdXJyZW50SW5kZXggPSAtMTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0Q3VycmVudEluZGV4KHN0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248bnVtYmVyPikge1xuICAgICAgICAgICAgc3RhdGUuY3VycmVudEluZGV4ID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZUhpc3RvcnlJdGVtKHN0YXRlKSB7XG4gICAgICAgICAgICBzdGF0ZS50aW1lU3RhY2sucG9wKCk7XG4gICAgICAgIH0sXG4gICAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBoaXN0b3J5U2xpY2U7XG4iLCJpbXBvcnQge2NvbmZpZ3VyZVN0b3JlfSBmcm9tICdAcmVkdXhqcy90b29sa2l0JztcbmltcG9ydCBlbnRpdHlJbmZvU2xpY2UgZnJvbSAnLi9lbnRpdHlJbmZvU2xpY2UnO1xuaW1wb3J0IGNsdXN0ZXJzU2xpY2UgZnJvbSAnLi9jbHVzdGVyc1NsaWNlJztcbmltcG9ydCBoaXN0b3J5U2xpY2UgZnJvbSAnLi9oaXN0b3J5U2xpY2UnO1xuXG5leHBvcnQgY29uc3Qgc3RvcmUgPSBjb25maWd1cmVTdG9yZSh7XG4gICAgcmVkdWNlcjoge1xuICAgICAgICBlbnRpdHlJbmZvOiBlbnRpdHlJbmZvU2xpY2UucmVkdWNlcixcbiAgICAgICAgY2x1c3RlcnM6IGNsdXN0ZXJzU2xpY2UucmVkdWNlcixcbiAgICAgICAgaGlzdG9yeTogaGlzdG9yeVNsaWNlLnJlZHVjZXIsXG4gICAgfSxcbn0pO1xuXG50eXBlIFRSb290U3RhdGUgPSBSZXR1cm5UeXBlPHR5cGVvZiBzdG9yZS5nZXRTdGF0ZT47XG5cbmV4cG9ydCBjb25zdCBzZWxlY3RIaXN0b3J5Q3VycmVudEluZGV4ID0gKHN0YXRlOiBUUm9vdFN0YXRlKSA9PiBzdGF0ZS5oaXN0b3J5LmN1cnJlbnRJbmRleDtcbmV4cG9ydCBjb25zdCBzZWxlY3RIaXN0b3J5U3RhY2sgPSAoc3RhdGU6IFRSb290U3RhdGUpID0+IHN0YXRlLmhpc3RvcnkudGltZVN0YWNrO1xuZXhwb3J0IGNvbnN0IHNlbGVjdEVudGl0eUluZm8gPSAoc3RhdGU6IFRSb290U3RhdGUpID0+IHN0YXRlLmVudGl0eUluZm87XG5leHBvcnQgY29uc3Qgc2VsZWN0Q2x1c3RlcnMgPSAoc3RhdGU6IFRSb290U3RhdGUpID0+IHN0YXRlLmNsdXN0ZXJzO1xuXG5leHBvcnQgY29uc3Qge2RlbGV0ZVByb2R1Y3QsIGFkZFByb2R1Y3QsIGRlbGV0ZUdyb3VwLCBhZGRHcm91cCwgdXBkYXRlQ2x1c3RlcnN9ID0gY2x1c3RlcnNTbGljZS5hY3Rpb25zO1xuZXhwb3J0IGNvbnN0IHthZGRIaXN0b3J5SXRlbSwgc2V0Q3VycmVudEluZGV4LCByZW1vdmVIaXN0b3J5SXRlbX0gPSBoaXN0b3J5U2xpY2UuYWN0aW9ucztcbmV4cG9ydCBjb25zdCB7c2V0Q3VycmVudEVudGl0eX0gPSBlbnRpdHlJbmZvU2xpY2UuYWN0aW9ucztcbiIsImltcG9ydCB7RHJvcFJlc3VsdH0gZnJvbSAncmVhY3QtYmVhdXRpZnVsLWRuZCc7XG5pbXBvcnQge0VFbnRpdHlUeXBlfSBmcm9tICcuL2VudW1zJztcbmltcG9ydCB7SUVudGl0eX0gZnJvbSAnLi90eXBlcyc7XG5cbmZ1bmN0aW9uIHJlb3JkZXIobGlzdDogSUVudGl0eVtdLCBzdGFydEluZGV4OiBudW1iZXIsIGVuZEluZGV4OiBudW1iZXIpOiBJRW50aXR5W10ge1xuICAgIGNvbnN0IHJlc3VsdCA9IFsuLi5saXN0XTtcbiAgICBjb25zdCBbcmVtb3ZlZF0gPSByZXN1bHQuc3BsaWNlKHN0YXJ0SW5kZXgsIDEpO1xuICAgIHJlc3VsdC5zcGxpY2UoZW5kSW5kZXgsIDAsIHJlbW92ZWQpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGZpbmRPcmlnaW4obGlzdDogSUVudGl0eVtdLCBpZDogc3RyaW5nKTogSUVudGl0eSB8IG51bGwge1xuICAgIGxldCBvcmlnaW5JdGVtOiBJRW50aXR5IHwgbnVsbCA9IGxpc3Q/LmZpbmQoaXRlbSA9PiBpdGVtLmlkID09PSBpZCkgfHwgbnVsbDtcbiAgICBpZiAoIW9yaWdpbkl0ZW0pIHtcbiAgICAgICAgZm9yIChsZXQgZWxlbWVudCBvZiBsaXN0KSB7XG4gICAgICAgICAgICBvcmlnaW5JdGVtID0gZWxlbWVudC5jaGlsZHJlbiA/IGZpbmRPcmlnaW4oZWxlbWVudC5jaGlsZHJlbiwgaWQpIDogbnVsbDtcbiAgICAgICAgICAgIGlmIChvcmlnaW5JdGVtKSBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3JpZ2luSXRlbTtcbn1cblxuY29uc3QgY2hhbmdlTWFpbkxpc3QgPSAobGlzdDogSUVudGl0eVtdLCBpZDogc3RyaW5nLCBjaGlsZHJlbkxpc3Q6IElFbnRpdHlbXSk6IElFbnRpdHlbXSA9PlxuICAgIGxpc3QubWFwKGVsZW0gPT5cbiAgICAgICAgZWxlbS5pZCA9PT0gaWRcbiAgICAgICAgICAgID8gey4uLmVsZW0sIGNoaWxkcmVuOiBjaGlsZHJlbkxpc3R9XG4gICAgICAgICAgICA6IGVsZW0/LmNoaWxkcmVuXG4gICAgICAgICAgICA/IHsuLi5lbGVtLCBjaGlsZHJlbjogY2hhbmdlTWFpbkxpc3QoZWxlbS5jaGlsZHJlbiwgaWQsIGNoaWxkcmVuTGlzdCl9XG4gICAgICAgICAgICA6IGVsZW1cbiAgICApO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVvZGVyZWRMaXN0KGxpc3Q6IElFbnRpdHlbXSA9IFtdLCByZXN1bHQ6IERyb3BSZXN1bHQpOiBJRW50aXR5W10ge1xuICAgIGNvbnN0IHNvdXJjZUluZGV4ID0gcmVzdWx0LnNvdXJjZS5pbmRleDtcbiAgICBjb25zdCBkZXN0SW5kZXggPSByZXN1bHQuZGVzdGluYXRpb24hLmluZGV4O1xuXG4gICAgY29uc3Qgc291cmNlRHJvcHBhYmxlSWQgPSByZXN1bHQuc291cmNlLmRyb3BwYWJsZUlkO1xuICAgIGNvbnN0IGRlc3REcm9wcGFibGVJZCA9IHJlc3VsdC5kZXN0aW5hdGlvbiEuZHJvcHBhYmxlSWQ7XG5cbiAgICBjb25zdCBzb3VyY2VJdGVtTGlzdCA9IGZpbmRPcmlnaW4obGlzdCwgc291cmNlRHJvcHBhYmxlSWQpPy5jaGlsZHJlbjtcbiAgICBjb25zdCBkZXN0SXRlbUxpc3QgPSBmaW5kT3JpZ2luKGxpc3QsIGRlc3REcm9wcGFibGVJZCk/LmNoaWxkcmVuO1xuXG4gICAgaWYgKCFzb3VyY2VJdGVtTGlzdCB8fCAhZGVzdEl0ZW1MaXN0KSB7XG4gICAgICAgIHJldHVybiBsaXN0O1xuICAgIH1cblxuICAgIGlmIChzb3VyY2VEcm9wcGFibGVJZCA9PT0gZGVzdERyb3BwYWJsZUlkKSB7XG4gICAgICAgIGNvbnN0IG5ld1NvdXJjZUl0ZW1MaXN0ID0gcmVvcmRlcihzb3VyY2VJdGVtTGlzdCwgc291cmNlSW5kZXgsIGRlc3RJbmRleCk7XG4gICAgICAgIHJldHVybiBjaGFuZ2VNYWluTGlzdChsaXN0LCBzb3VyY2VEcm9wcGFibGVJZCwgbmV3U291cmNlSXRlbUxpc3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBuZXdTb3VyY2VJdGVtTGlzdCA9IFsuLi5zb3VyY2VJdGVtTGlzdF07XG4gICAgICAgIGNvbnN0IFtkcmFnZ2VkSXRlbV0gPSBuZXdTb3VyY2VJdGVtTGlzdC5zcGxpY2Uoc291cmNlSW5kZXgsIDEpO1xuXG4gICAgICAgIGxldCBuZXdEZXN0SXRlbUxpc3QgPSBbLi4uZGVzdEl0ZW1MaXN0XTtcbiAgICAgICAgbmV3RGVzdEl0ZW1MaXN0LnNwbGljZShkZXN0SW5kZXgsIDAsIGRyYWdnZWRJdGVtKTtcblxuICAgICAgICBsZXQgbmV3TGlzdCA9IGNoYW5nZU1haW5MaXN0KGxpc3QsIHNvdXJjZURyb3BwYWJsZUlkLCBuZXdTb3VyY2VJdGVtTGlzdCk7XG4gICAgICAgIHJldHVybiBjaGFuZ2VNYWluTGlzdChuZXdMaXN0LCBkZXN0RHJvcHBhYmxlSWQsIG5ld0Rlc3RJdGVtTGlzdCk7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgZmluZEN1cnJlbnRDbHVzdGVyID0gKGNsdXN0ZXJzOiBJRW50aXR5W10gPSBbXSwgZW50aXR5OiBJRW50aXR5IHwgbnVsbCk6IElFbnRpdHkgfCBudWxsID0+XG4gICAgKGVudGl0eT8udHlwZSA9PT0gRUVudGl0eVR5cGUuUHJvZHVjdFxuICAgICAgICA/IGNsdXN0ZXJzLmZpbmQoY2x1c3RlciA9PlxuICAgICAgICAgICAgICBjbHVzdGVyLmNoaWxkcmVuPy5maW5kKGdyb3VwID0+IGdyb3VwLmNoaWxkcmVuPy5maW5kKHByb2R1Y3QgPT4gcHJvZHVjdC5pZCA9PT0gZW50aXR5LmlkKSlcbiAgICAgICAgICApXG4gICAgICAgIDogZW50aXR5Py50eXBlID09PSBFRW50aXR5VHlwZS5Hcm91cFxuICAgICAgICA/IGNsdXN0ZXJzLmZpbmQoY2x1c3RlciA9PiBjbHVzdGVyLmNoaWxkcmVuPy5maW5kKGdyb3VwID0+IGdyb3VwLmlkID09PSBlbnRpdHkuaWQpKVxuICAgICAgICA6IGNsdXN0ZXJzLmZpbmQoY2x1c3RlciA9PiBjbHVzdGVyLmlkID09PSBlbnRpdHk/LmlkKSkgfHwgbnVsbDtcblxuZXhwb3J0IGNvbnN0IGZpbmRDdXJyZW50R3JvdXAgPSAoZ3JvdXBzOiBJRW50aXR5W10gPSBbXSwgZW50aXR5OiBJRW50aXR5IHwgbnVsbCk6IElFbnRpdHkgfCBudWxsID0+XG4gICAgKGVudGl0eT8udHlwZSA9PT0gRUVudGl0eVR5cGUuR3JvdXBcbiAgICAgICAgPyBncm91cHMuZmluZChncm91cCA9PiBncm91cC5pZCA9PT0gZW50aXR5Py5pZClcbiAgICAgICAgOiBlbnRpdHk/LnR5cGUgPT09IEVFbnRpdHlUeXBlLlByb2R1Y3RcbiAgICAgICAgPyBncm91cHMuZmluZChncm91cCA9PiBncm91cC5jaGlsZHJlbj8uZmluZChwcm9kdWN0ID0+IHByb2R1Y3QuaWQgPT09IGVudGl0eS5pZCkpXG4gICAgICAgIDogbnVsbCkgfHwgbnVsbDtcblxuZXhwb3J0IGNvbnN0IGdldFRpbWVTdGFtcCA9ICgpOiBzdHJpbmcgPT5cbiAgICBJbnRsLkRhdGVUaW1lRm9ybWF0KHVuZGVmaW5lZCwge1xuICAgICAgICBob3VyOiAnMi1kaWdpdCcsXG4gICAgICAgIG1pbnV0ZTogJzItZGlnaXQnLFxuICAgICAgICBzZWNvbmQ6ICcyLWRpZ2l0JyxcbiAgICAgICAgaG91cjEyOiBmYWxzZSxcbiAgICB9KS5mb3JtYXQobmV3IERhdGUoKSk7XG4iXSwibmFtZXMiOlsiY2x1c3RlciIsImNsdXN0ZXJEYXRhIiwiY3VycmVudEVudGl0eSIsInVzZVNlbGVjdG9yIiwic2VsZWN0RW50aXR5SW5mbyIsInRoZW1lIiwidXNlTWFudGluZVRoZW1lIiwiZGlzcGF0Y2giLCJ1c2VEaXNwYXRjaCIsInByaW1hcnlDb2xvciIsImNvbG9ycyIsImJsdWUiLCJzZWNvbmRhcnlDb2xvciIsImxpbmVDb2xvciIsImRhcmsiLCJib3JkZXJDb2xvciIsInRleHRDb2xvciIsImdyYXkiLCJkM0NvbnRhaW5lciIsInVzZVJlZiIsIndpZHRoIiwid2luZG93Iiwic2NyZWVuIiwiaGVpZ2h0IiwidXNlTWVtbyIsImNoaWxkcmVuIiwicmVkdWNlIiwiYWNjIiwiY3VycmVudCIsImxlbmd0aCIsInVzZUVmZmVjdCIsInNlbGVjdCIsInNlbGVjdEFsbCIsInJlbW92ZSIsInByZVJvb3RMYXlvdXQiLCJkM0NsdXN0ZXIiLCJoaWVyYXJjaHkiLCJkIiwiZHkiLCJyb290TGF5b3V0IiwidHJlZSIsIm5vZGVTaXplIiwidHJlZUxheW91dCIsIngwIiwiSW5maW5pdHkiLCJ4MSIsImVhY2giLCJ4Iiwic3ZnIiwiYXBwZW5kIiwiYXR0ciIsImRhdGEiLCJkZXNjZW5kYW50cyIsInNsaWNlIiwiam9pbiIsInkiLCJwYXJlbnQiLCJzdHlsZSIsInNlbGVjdGVkRWxlbWVudHMiLCJvbiIsImV2ZW50IiwiaWQiLCJ0YXJnZXQiLCJmaWxsIiwic2V0Q3VycmVudEVudGl0eSIsInRleHQiLCJuYW1lIiwiZm9udEZhbWlseSIsInJlZiIsImNsdXN0ZXJzIiwic2VsZWN0Q2x1c3RlcnMiLCJDb250YWluZXIiLCJmbHVpZCIsIm1hcCIsInNlbGVjdGVkR3JvdXAiLCJzZXRTZWxlY3RlZEdyb3VwIiwidXNlU3RhdGUiLCJzZWxlY3RlZENsdXN0ZXIiLCJzZXRTZWxlY3RlZENsdXN0ZXIiLCJpc1Byb2R1Y3RBdmFpbGFibGUiLCJ0eXBlIiwiRUVudGl0eVR5cGUiLCJQcm9kdWN0IiwiaXNHcm91cEF2YWlsYWJsZSIsIkdyb3VwIiwiaXNDbHVzdGVyQXZhaWxhYmxlIiwiQ2x1c3RlciIsImN1cnJlbnRDbHVzdGVyIiwiZmluZEN1cnJlbnRDbHVzdGVyIiwiY3VycmVudEdyb3VwIiwiZmluZEN1cnJlbnRHcm91cCIsImNsdXN0ZXJTZWxlY3RPcHRpb25zIiwibGFiZWwiLCJ2YWx1ZSIsImdyb3VwU2VsZWN0T3B0aW9ucyIsIkdyaWQiLCJncm93IiwiQ29sIiwiVGV4dElucHV0IiwiZGlzYWJsZWQiLCJTZWxlY3QiLCJvbkNoYW5nZSIsInNlbGVjdGVkSWQiLCJmaW5kZWRHcm91cCIsImZpbmQiLCJwcmV2UHJvZHVjdExpc3QiLCJmaWx0ZXIiLCJ1cGRhdGVkUHJvZHVjdExpc3QiLCJjb25jYXQiLCJuZXdDbHVzdGVyTGlzdCIsImdyb3VwIiwiYWRkSGlzdG9yeUl0ZW0iLCJzdGFjayIsInRpbWVzdGFtcCIsImdldFRpbWVTdGFtcCIsInVwZGF0ZUNsdXN0ZXJzIiwiZmluZGVkQ2x1c3RlciIsInByZXZHcm91cExpc3QiLCJ1cGRhdGVkR3JvdXBMaXN0IiwicCIsImluZGV4IiwiU3RhY2siLCJhbGlnbiIsIkJ1dHRvbiIsImNvbG9yIiwib25DbGljayIsIm5vZGVJbmZvcm1hdGlvbiIsIm5ld0lkIiwicHJvZHVjdCIsImRlbGV0ZVByb2R1Y3QiLCJkZWxldGVHcm91cCIsImxpbmsiLCJmaWxlQmxvYiIsIkJsb2IiLCJKU09OIiwic3RyaW5naWZ5IiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiQ2VudGVyIiwiY29tcG9uZW50IiwidmFyaWFudCIsImRvd25sb2FkIiwiaHJlZiIsIm1haW5UaGVtZSIsImlzQ29sbGFwc2VkIiwic2V0SXNDb2xsYXBzZWQiLCJoaXN0b3J5UmVjb3JkcyIsInNlbGVjdEhpc3RvcnlTdGFjayIsImhpc3RvcnlDdXJyZW50SW5kZXgiLCJzZWxlY3RIaXN0b3J5Q3VycmVudEluZGV4IiwiaXNIaXN0b3J5VmlzaWJsZSIsImhhbmRsZUhpc3RvcnlDbGljayIsImUiLCJwYXJzZUludCIsImN1cnJlbnRUYXJnZXQiLCJzZXRDdXJyZW50SW5kZXgiLCJzeCIsIl90aGVtZSIsImZvbnRXZWlnaHQiLCJmb250U2l6ZSIsImJhY2tncm91bmRDb2xvciIsImdyb3VwQ29sb3IiLCJvIiwicG9zaXRpb24iLCJUZXh0IiwiQ29sbGFwc2UiLCJpbiIsIlNjcm9sbEFyZWEiLCJpdGVtIiwiQm94IiwidG9TdHJpbmciLCJweCIsInRleHRBbGlnbiIsInBhZGRpbmciLCJzcGFjaW5nIiwieHMiLCJib3JkZXJSYWRpdXMiLCJyYWRpdXMiLCJjdXJzb3IiLCJtYXJnaW4iLCJjb2xvckhvdmVyIiwic2NoZW1hIiwiaXRlbXMiLCJwcm9wZXJ0aWVzIiwiJHJlZiIsInJlcXVpcmVkIiwiYWRkaXRpb25hbFByb3BlcnRpZXMiLCJvbkltcG9ydEZpbGUiLCJmaWxlSW5wdXQiLCJjbGljayIsImFjY2VwdCIsImRpc3BsYXkiLCJvbklucHV0IiwiYXN5bmMiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsImZpbGUiLCJmaWxlcyIsImZpbGVUZXh0IiwicGFyc2VkRmlsZSIsInBhcnNlIiwiY29tcGlsZSIsInZhbGlkYXRlIiwiY2x1c3RlcnNKc29uIiwiSnNvbklucHV0IiwicGxhY2Vob2xkZXIiLCJ2YWxpZGF0aW9uRXJyb3IiLCJmb3JtYXRPbkJsdXIiLCJhdXRvc2l6ZSIsIm1pblJvd3MiLCJlbnRpdHkiLCJEcm9wcGFibGUiLCJkcm9wcGFibGVJZCIsInByb3ZpZGVkIiwiZHJvcHBhYmxlUHJvcHMiLCJpbm5lclJlZiIsIm1hcmdpbkJvdHRvbSIsIlBhcGVyIiwic2hhZG93IiwibWIiLCJjbHVzdGVyQ29sb3IiLCJjb2xvclNlY29uZGFyeSIsImxpbmVIZWlnaHQiLCJmb3RuV2VpZ2h0IiwiaSIsIlRyZWVMZWFmIiwiaXNPcGVuZWQiLCJzZXRJc09wZW5lZCIsIkRyYWdnYWJsZSIsImRyYWdnYWJsZUlkIiwiZHJhZ2dhYmxlUHJvcHMiLCJkcmFnSGFuZGxlUHJvcHMiLCJtYXJnaW5MZWZ0IiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwiYm9yZGVyIiwiQWN0aW9uSWNvbiIsInByZXYiLCJNaW51cyIsInNpemUiLCJQbHVzIiwiRHJhZ0Ryb3BDb250ZXh0Iiwib25EcmFnRW5kIiwicmVzdWx0IiwiZGVzdGluYXRpb24iLCJzb3VyY2UiLCJnZXRSZW9kZXJlZExpc3QiLCJmbiIsInJnYmEiLCJjcmVhdGVSb290IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInJlbmRlciIsImlzRHJhd2VyT3BlbmVkIiwic2V0SXNEcmF3ZXJPcGVuZWQiLCJoYXNJbnZhbGlkSW1wb3J0Iiwic2V0SGFzSW52YWxpZEltcG9ydCIsIlByb3ZpZGVyIiwic3RvcmUiLCJNYW50aW5lUHJvdmlkZXIiLCJjb2xvclNjaGVtZSIsIkFwcFNoZWxsIiwiZml4ZWQiLCJuYXZiYXIiLCJOYXZiYXIiLCJiYXNlIiwiU2VjdGlvbiIsIm10Iiwib2Zmc2V0U2Nyb2xsYmFycyIsImhlYWRlciIsIkhlYWRlciIsIlRpdGxlIiwib3JkZXIiLCJpc1N1Y2Nlc3MiLCJEcmF3ZXIiLCJvcGVuZWQiLCJvbkNsb3NlIiwidGl0bGUiLCJTcGFjZSIsImgiLCJhc2lkZSIsIkFzaWRlIiwiaGlkZGVuQnJlYWtwb2ludCIsInNtIiwibGciLCJOb3RpZmljYXRpb24iLCJpY29uIiwiWCIsImd1dHRlciIsImp1c3RpZnkiLCJjbHVzdGVyU2xpY2UiLCJjcmVhdGVTbGljZSIsImluaXRpYWxTdGF0ZSIsInJlZHVjZXJzIiwic3RhdGUiLCJhY3Rpb24iLCJwYXlsb2FkIiwiYWRkUHJvZHVjdCIsInBheWxvYWRfZ3JvdXAiLCJhZGRHcm91cCIsIl9zdGF0ZSIsImVudGl0eUluZm9TbGljZSIsImhpc3RvcnlTbGljZSIsImN1cnJlbnRJbmRleCIsInRpbWVTdGFjayIsInB1c2giLCJyZW1vdmVIaXN0b3J5SXRlbSIsInBvcCIsImNvbmZpZ3VyZVN0b3JlIiwicmVkdWNlciIsImVudGl0eUluZm8iLCJoaXN0b3J5IiwiYWN0aW9ucyIsImZpbmRPcmlnaW4iLCJsaXN0Iiwib3JpZ2luSXRlbSIsImVsZW1lbnQiLCJjaGFuZ2VNYWluTGlzdCIsImNoaWxkcmVuTGlzdCIsImVsZW0iLCJzb3VyY2VJbmRleCIsImRlc3RJbmRleCIsInNvdXJjZURyb3BwYWJsZUlkIiwiZGVzdERyb3BwYWJsZUlkIiwic291cmNlSXRlbUxpc3QiLCJkZXN0SXRlbUxpc3QiLCJuZXdTb3VyY2VJdGVtTGlzdCIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsInJlbW92ZWQiLCJzcGxpY2UiLCJyZW9yZGVyIiwiZHJhZ2dlZEl0ZW0iLCJuZXdEZXN0SXRlbUxpc3QiLCJuZXdMaXN0IiwiZ3JvdXBzIiwiSW50bCIsIkRhdGVUaW1lRm9ybWF0IiwidW5kZWZpbmVkIiwiaG91ciIsIm1pbnV0ZSIsInNlY29uZCIsImhvdXIxMiIsImZvcm1hdCIsIkRhdGUiXSwic291cmNlUm9vdCI6IiJ9